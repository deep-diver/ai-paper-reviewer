name: collect new articles

on: 
  schedule:
    - cron: "0 */12 * * *"
  workflow_dispatch:
  #   inputs:
  #     start_date:
  #       required: true
  #       type: string
  #     end_date:
  #       required: true
  #       type: string
  #     num_threads:
  #       required: true
  #       default: "4"
  #       type: string
        
jobs:
  collect-articles:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository A
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Checkout Repository B
        uses: actions/checkout@v3
        with:
          repository: 'deep-diver/paper-reviewer' # Replace with the actual owner and name of repository B
          token: ${{ secrets.GH_TOKEN }} # Create a PAT with read access to repository B and store it as a secret in repository A
          path: 'paper-reviewer'

      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - id: auth
        name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_API_KEY }}

      - name: Get Current Date
        id: get-date
        run: |
          echo "cur_date=$(date '+%Y-%m-%d')" >> $GITHUB_OUTPUT

      - name: Setup dependencies and run the script
        run: |
          cd paper-reviewer
          
          pip install -r requirements.txt
          sudo apt install poppler-utils
          sudo apt install ffmpeg
          
          sudo chmod 777 ./collect-hf-linux.sh
          sudo chmod 777 ./convert-hf-linux.sh

          echo ${{ steps.get-date.outputs.cur_date }}
          echo "running collect-hf-linux.sh script....."

          export GCP_API_KEY=$(gcloud auth print-access-token)
          # GCP_API_KEY=${{ steps.auth.outputs.access_token }} \  
          
          GEMINI_API_KEY=${{ secrets.GEMINI_API_KEY }} \
          UPSTAGE_API_KEY=${{ secrets.UPSTAGE_API_KEY }} \
          ./collect-hf-linux.sh \
            ${{ steps.get-date.outputs.cur_date }} \
            ${{ steps.get-date.outputs.cur_date }} \
            8 \
            ../content/paper-reviews

          echo "running convert-hf-linux.sh script....."

          R2_ACCESS_KEY_ID=${{ secrets.R2_ACCESS_KEY_ID }} \
          R2_SECRET_ACCESS_KEY=${{ secrets.R2_SECRET_ACCESS_KEY }} \
          R2_S3_ENDPOINT_URL=${{ secrets.R2_S3_ENDPOINT_URL }} \
          R2_DOMAIN_NAME=${{ secrets.R2_DOMAIN_NAME }} \
          ./convert-hf-linux.sh \
            ${{ steps.get-date.outputs.cur_date }} \
            ${{ steps.get-date.outputs.cur_date }} \
            true
          
      - name: Move Articles to Repository A
        id: move-articles  # Add an ID to this step
        run: |
          if [ -d "paper-reviewer/articles" ] && [ "$(ls -A paper-reviewer/articles)" ]; then
            mkdir -p ./content/${{ steps.get-date.outputs.cur_date }}
            mv paper-reviewer/articles/* ./content/${{ steps.get-date.outputs.cur_date }}/
            rm -rf paper-reviewer
            rm gha-creds*.json
            echo "articles_moved=true" >> $GITHUB_OUTPUT # Set an output variable if successful
          else
            echo "articles_moved=false" >> $GITHUB_OUTPUT # Set an output variable if failed
          fi

      - name: Manage Directories
        if: steps.move-articles.outputs.articles_moved == 'true'  # Conditional execution
        run: |
          ./manage_dir.sh
          python manage_menus.py --cur-date ${{ steps.get-date.outputs.cur_date }}

      - name: Commit and Push Changes
        run: |
          git config user.name 'Chansung'
          git config user.email 'deep.diver.csp@gmail.com'
          git add .
          git commit -m "Automated update of static pages"
          git push
