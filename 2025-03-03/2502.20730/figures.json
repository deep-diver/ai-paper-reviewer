[{"figure_path": "https://arxiv.org/html/2502.20730/x1.png", "caption": "Figure 1: This paper proposes the complex engineering solution design task and a new system that can generate reliable solutions via the bi-point thinking tree.", "description": "This figure illustrates the task of complex engineering solution design, which involves generating complete and feasible solutions under multiple real-world constraints.  It introduces SolutionRAG, a novel system designed to tackle this challenge.  SolutionRAG utilizes a \"bi-point thinking tree\" approach, where the system iteratively designs solutions and incorporates feedback through review, refining the solution until it meets the specified requirements. The bi-point tree visually represents this iterative solution generation and refinement process.", "section": "1 Introduction"}, {"figure_path": "https://arxiv.org/html/2502.20730/x2.png", "caption": "Figure 2: Illustration of the SolutionBench construction method, which includes collecting technology reports from engineering journals to ensure authority and authenticity, extracting useful content based on a manually formatted template and powerful LLMs, and finally harvesting the benchmark after manual verification and merging.", "description": "SolutionBench is a benchmark dataset for evaluating complex engineering solution design.  The figure details the process of its creation: First, technology reports from authoritative engineering journals are gathered to ensure quality.  Second,  a manually designed template is used with Large Language Models (LLMs) to extract crucial information from these reports. This information includes requirements, solutions, analysis, and technical details. Finally, the extracted information undergoes human verification to correct any errors or inconsistencies and merge data from the same engineering domain into a unified knowledge base, creating the SolutionBench.", "section": "2 SolutionBench"}, {"figure_path": "https://arxiv.org/html/2502.20730/x3.png", "caption": "Figure 3: Illustration of SolutionRAG, we set the child number of each node as 2 for easy presentation above. SolutionRAG uses tree-based exploration to find optimal solution improvement process, bi-point thinking to guarantee generated solutions satisfy all constraints, and a pruning mechanism to balance efficiency and performance.", "description": "SolutionRAG uses a tree-based exploration strategy to iteratively refine solutions.  Each node in the tree represents either a proposed solution or a reviewer comment on a solution. The process alternates between solution generation and review (bi-point thinking).  This ensures solutions consider all constraints. A pruning mechanism removes less promising solution paths to improve efficiency and focuses on the most promising solutions.", "section": "3 SolutionRAG"}, {"figure_path": "https://arxiv.org/html/2502.20730/x4.png", "caption": "Figure 4: Performance changes during the tree growth. The figure shows that scores become higher as the tree grows, proving SolutionRAG can indeed improve the solution scores as inference being deep.", "description": "This figure visualizes the performance improvement of SolutionRAG over different layers of the tree-based exploration process.  As the tree grows deeper (more inference steps are performed), the scores (both analytical and technical) of the generated solutions consistently increase. This demonstrates SolutionRAG's capacity for iterative refinement and improved solution quality as the model explores more solution paths.", "section": "4 Experiments"}, {"figure_path": "https://arxiv.org/html/2502.20730/x5.png", "caption": "Figure 5: Effectiveness of node evaluation mechanism. The figure shows that scores in retained nodes are higher than in pruned nodes, thus the node evaluation is an effective method for judging and pruning in SolutionRAG.", "description": "This figure visualizes the effectiveness of the node evaluation mechanism used in the SolutionRAG system.  The graph compares the scores of solution nodes that were retained during the pruning process versus those that were pruned.  The results clearly show that retained nodes consistently have higher scores than pruned nodes, demonstrating that the node evaluation method successfully identifies and retains the most promising solution paths, improving efficiency and solution quality.", "section": "4 Experiments"}, {"figure_path": "https://arxiv.org/html/2502.20730/x6.png", "caption": "Figure 6: Template used to extract useful content from original engineering reports, aiming to capture real-world complex requirements, expert-authored solutions, analytical knowledge used to interpret the requirements, technical knowledge applied in addressing the requirements, and explanations for the expert\u2019s solution design process.", "description": "This figure displays the template used to extract relevant information from engineering reports for a benchmark dataset.  The template is designed to capture key aspects of the engineering design process, including real-world problem requirements, expert solutions, the analytical reasoning behind those solutions, the technical knowledge utilized, and the step-by-step explanation of the design process. This structured approach ensures consistency and completeness in the collected data.", "section": "2 SolutionBench"}, {"figure_path": "https://arxiv.org/html/2502.20730/x7.png", "caption": "Figure 7: Prompts used in node expansion of tree growth, including generating solution proposals and solutions based on the root node, generating comment proposals and comments based on a solution node, and generating solution proposals and solutions based on a comment node.", "description": "Figure 7 details the prompts used in SolutionRAG's tree-based exploration process.  It shows how SolutionRAG generates new solution and comment nodes at each step. Starting from the root node (the problem requirement), prompts guide the system to generate solution proposals.  Subsequently, prompts are used when evaluating these solutions to generate comments highlighting areas for improvement. Further prompts drive the iterative refinement of solutions based on the comments.  The process repeats, alternating between solution proposals and comments to gradually build a reliable and complete solution.", "section": "3.2 Solution Improvement via Tree Growth"}, {"figure_path": "https://arxiv.org/html/2502.20730/x8.png", "caption": "Figure 8: Prompts for calculating analytical score and technical score, which uses the golden solution, explanation, and corresponding analytical and technical knowledge as references, allowing GPT-4o to assess whether the system\u2019s solution sufficiently consider the challenges posed by the complex constraints and apply the appropriate technologies to address the complex constraints in the requirements.", "description": "Figure 8 presents the prompts used to evaluate the quality of a system's solution to a complex engineering problem.  These prompts leverage GPT-4 to assess two key aspects: (1) the analytical score, which evaluates the system's understanding and consideration of the complex constraints, and (2) the technical score, which assesses the appropriateness and accuracy of the technologies applied. The evaluation process uses the 'gold standard' solution, explanation, analytical knowledge, and technical knowledge as references, allowing for a comprehensive comparison and a numerical score (0-100) for each aspect.", "section": "4 Experiments"}]