[{"figure_path": "https://arxiv.org/html/2501.09891/x1.png", "caption": "Figure 1: Mind Evolution\u00a0is a genetic-based evolutionary search strategy that operates\nin natural language space.\nThe figure illustrates how Mind Evolution\u00a0evolves a population of solution\ncandidates toward higher quality candidates for a travel planning task.\nThe candidate population is improved through an iterative process,\nwhere an LLM is used to recombine and refine candidates in each iteration.", "description": "Mind Evolution is a genetic algorithm that uses a large language model (LLM) to iteratively improve a population of natural language solutions.  The figure depicts the process for a travel planning task.  The LLM generates, recombines (crossover), and refines (mutation) solution candidates based on feedback from an evaluator. The process continues until a satisfactory solution is found or a computational budget is reached.  The algorithm combines divergent thinking (exploration of many solutions in parallel) and convergent thinking (iterative refinement and selection of top-performing solutions).", "section": "3. Method"}, {"figure_path": "https://arxiv.org/html/2501.09891/x2.png", "caption": "Figure 2: Illustrating the Refinement through Critical Conversation\u00a0(RCC) process,\nwhere an initial solution is first proposed, then evaluated and subjected to\nfeedback from a critic, after which an author proposed a refined solution\nand the process iterates.", "description": "The figure illustrates the iterative refinement process within the Mind Evolution framework.  It begins with an initial solution generated by the LLM. This solution is then evaluated using a programmatic evaluator which provides feedback on the solution's quality. This feedback is then fed back into the LLM along with the initial solution, but this time using two distinct personas within the prompt: a 'critic' who analyzes the solution and its flaws, and an 'author' who uses the feedback and criticism to generate a revised, improved solution.  This cycle of evaluation, criticism, and refinement repeats until a satisfactory solution is reached or a termination condition is met.", "section": "3.2 Mind Evolution"}, {"figure_path": "https://arxiv.org/html/2501.09891/x3.png", "caption": "Figure 3: Success rate on the validation set of the TravelPlanner benchmark,\norganized by problem instance difficulty and the number of travel days.", "description": "This figure shows the success rates of different LLM-based planning strategies on the TravelPlanner benchmark.  The x-axis categorizes problem instances by their difficulty (Easy, Medium, Hard) and the length of the trip (3, 5, or 7 days). The y-axis represents the success rate, indicating the percentage of problem instances solved correctly by each method.  This visualization allows for a comparison of the performance of various methods across different problem difficulty levels and trip durations.", "section": "4. Experiments"}, {"figure_path": "https://arxiv.org/html/2501.09891/x4.png", "caption": "Figure 4: Success rate on the validation set of the Trip Planning benchmark per number of cities to visit.", "description": "This figure shows the success rate achieved by different methods on the Trip Planning task of the Natural Plan benchmark. The x-axis represents the number of cities to visit in the trip planning task, and the y-axis represents the success rate. Different methods are compared, showing how their performance varies depending on the number of cities involved.", "section": "4.2. Natural Plan - Trip Planning"}, {"figure_path": "https://arxiv.org/html/2501.09891/x5.png", "caption": "Figure 5: Success rate on the validation set of the Meeting Planning benchmark per number of people to meet with.", "description": "This figure shows how the success rate of Mind Evolution varies depending on the number of people the model needs to schedule meetings with in the Meeting Planning task of the Natural Plan benchmark.  The x-axis represents the number of people to meet, and the y-axis displays the success rate (percentage of problem instances solved successfully).  It allows for comparison of Mind Evolution's performance against three baseline methods: 1-Pass, Best-of-N, and Sequential Revision+.", "section": "4.3. Natural Plan \u2013 Meeting Planning"}, {"figure_path": "https://arxiv.org/html/2501.09891/x6.png", "caption": "Figure 6: Success rate on the validation set for each natural language planning benchmark at each generation of Mind Evolution.", "description": "This figure displays the success rate achieved by the Mind Evolution model across three different natural language planning benchmarks (TravelPlanner, Trip Planning, and Meeting Planning) over multiple generations. Each line represents a benchmark, showing how the model's success rate improves with each successive generation of the evolutionary algorithm.  The x-axis represents the generation number, and the y-axis represents the success rate (percentage of problem instances solved correctly).  This visualization illustrates the iterative improvement of the model's problem-solving capabilities through the evolutionary search process.", "section": "4. Experiments"}, {"figure_path": "https://arxiv.org/html/2501.09891/x7.png", "caption": "Figure 7: TravelPlanner success rates and evaluation scores as the number of candidate solutions is increased.", "description": "This figure shows the relationship between the number of candidate solutions generated and the success rate and average evaluation score for the TravelPlanner task.  It plots the success rate and the average evaluation score (a measure of solution quality) against the number of candidate solutions that are considered by different search strategies (Mind Evolution, Sequential-Revision+, and Best-of-N).  The graph illustrates how the performance of each search strategy improves as more solutions are explored.", "section": "4. Experiments"}, {"figure_path": "https://arxiv.org/html/2501.09891/x8.png", "caption": "Figure 8: Trip Planning success rates and evaluation scores as the number of candidate solutions is increased.", "description": "This figure shows the performance of different search strategies on the Trip Planning task in the Natural Language Planning benchmark.  Specifically, it plots the success rate and average evaluation score against the number of candidate solutions generated by each strategy (Mind Evolution, Sequential-Revision+, and Best-of-N).  The x-axis represents the number of candidate solutions, and the y-axis shows both the success rate (left y-axis) and average evaluation score (right y-axis). This visualization helps demonstrate how the success rate and solution quality improve as more candidate solutions are explored, allowing for a comparison of the effectiveness of each search algorithm.", "section": "4. Experiments"}, {"figure_path": "https://arxiv.org/html/2501.09891/x9.png", "caption": "Figure 9: Meeting Planning success rates and evaluation scores as the number of candidate solutions is increased.", "description": "This figure illustrates the performance of Mind Evolution and baseline methods on the Meeting Planning task from the Natural Plan benchmark.  It shows the success rate (the percentage of problem instances solved correctly) and average evaluation score (a measure of solution quality, with higher scores indicating better solutions) as a function of the number of candidate solutions generated. The x-axis represents the number of candidate solutions, while the y-axis displays both success rate and average evaluation score.  Different colored lines represent different search strategies.  This visualization helps to understand how each search method's performance scales with increased computational cost, as more candidate solutions generally imply a higher cost but can also lead to higher accuracy and better solution quality.", "section": "4. Experiments"}, {"figure_path": "https://arxiv.org/html/2501.09891/x10.png", "caption": "Figure 10: StegPoet\u00a0example.\nExample of the encoding of a StegPoet\u00a0problem instance (left)\nand a correct solution (right) that includes the number-to-word cipher and\na poem in the style of a children\u2019s poetry author.\nNote that |M|=12\ud835\udc4012|M|=12| italic_M | = 12 in this instance.\nWe added capitalization to the code words to highlight them.", "description": "This figure demonstrates an example of the StegPoet task, a new benchmark introduced in the paper. The left side shows the problem instance, which includes a hidden message (M) represented as a sequence of numbers and the desired style and topic for the generated text.  The right side displays a correct solution, where the numbers in M have been encoded using a number-to-word cipher into a poem that matches the specified style (children's poetry) and topic. The solution also includes the cipher itself.  Note that the length of the hidden message (|M|) in this example is 12, and the code words in the poem are capitalized for clarity.", "section": "5. A Challenging New Task: StegPoet"}, {"figure_path": "https://arxiv.org/html/2501.09891/extracted/6137017/ct1_v1.png", "caption": "Figure 11: \nHistogram of Success Rate for each difficulty level.\n1-Pass returns valid responses, but fails to solve any of the problems,\nso it is not visible in the histogram.", "description": "Figure 11 is a histogram showing the success rate of different methods on the StegPoet task, categorized by difficulty level.  The x-axis represents the different difficulty levels of the StegPoet task (likely based on the length of the hidden message, the number of repetitions of numbers, how close the repeated numbers are, and the spacing between cipher words). The y-axis represents the success rate (percentage of problems solved correctly).  The histogram visually compares the performance of Mind Evolution against baseline methods (Best-of-N and Sequential-Revision+). The 1-Pass method is not shown in the histogram because it failed to solve any problems.", "section": "5. A Challenging New Task: StegPoet"}, {"figure_path": "https://arxiv.org/html/2501.09891/extracted/6137017/ct2_v1.png", "caption": "Figure 12: Example Meeting Planning prompt and model response with parent solutions given (Part 1)", "description": "This figure shows a prompt for the Meeting Planning task, a sub-task of the Natural Language Planning benchmark.  The prompt includes general instructions, a few example tasks and solutions, and the specific task description. The model response showcases parent solutions (previous attempts at the task) and the corresponding feedback. This is part one of a multi-part figure illustrating the interaction of the prompt and the model's iterative response generation process within the Mind Evolution algorithm.", "section": "3. Method"}, {"figure_path": "https://arxiv.org/html/2501.09891/extracted/6137017/ct3_v1.png", "caption": "Figure 13: Example Meeting Planning prompt and model response with parent solutions given (Part 2)", "description": "This figure shows a prompt used in the Meeting Planning task within the Mind Evolution framework.  The prompt includes general instructions, examples of previous tasks and solutions, and the current task requirements. Notably, the prompt presents \"parent solutions\" (previously generated solutions) along with feedback from an evaluator to guide the LLM in generating a refined solution. This illustrates the iterative refinement process of Mind Evolution, where the LLM learns from previous attempts and critiques to produce improved solutions. The model's response (a proposed meeting plan) demonstrates how the LLM uses this feedback to generate a refined plan that addresses earlier errors and attempts to meet the scheduling requirements more effectively.", "section": "3. Method"}, {"figure_path": "https://arxiv.org/html/2501.09891/extracted/6137017/ct4_v1.png", "caption": "Figure 14: Example Meeting Planning prompt and model response with parent solutions given (Part 3)", "description": "This figure shows a prompt used in the Meeting Planning task of the Mind Evolution approach.  It illustrates the \"Refinement through Critical Conversation (RCC)\" process, where the LLM acts as both critic and author to refine the solution.  The prompt includes instructions for the LLM to analyze previously proposed plans, identify shortcomings, and offer suggestions for improvement.  It also presents parent solutions (previous plans) with their corresponding evaluation feedback, guiding the LLM towards creating a higher-quality solution that considers the given constraints and addresses the identified issues.", "section": "3. Method"}, {"figure_path": "https://arxiv.org/html/2501.09891/extracted/6137017/ct5_v1.png", "caption": "Figure 15: Example Meeting Planning prompt and model response with parent solutions given (Part 4)", "description": "This figure shows a prompt used in the Mind Evolution process for the Meeting Planning task.  It illustrates the \"Refinement through Critical Conversation\" strategy, where an LLM plays the roles of both critic and author.  The critic analyzes previously proposed plans and highlights shortcomings, while the author uses these critiques to create improved plans. This is an iterative process, aiming to generate increasingly better solutions.", "section": "3. Method"}, {"figure_path": "https://arxiv.org/html/2501.09891/extracted/6137017/tp1.png", "caption": "Figure 16: Example Meeting Planning prompt and model response with parent solutions given (Part 5)", "description": "This figure shows a detailed example of the Meeting Planning prompt used in the Mind Evolution method.  It displays the instructions given to the Large Language Model (LLM), including general instructions, example tasks and solutions, and the specific task requirements. It also illustrates the 'previous plans' section, showing previously generated plans along with their associated issues.  Furthermore, it presents the 'critical thinking instructions' which guide the LLM to improve the plans through a structured critical conversation between a critic and an author, leading to a refined solution. The figure includes prompts and the LLM's response illustrating the iterative refinement process within a single generation.", "section": "3. Method"}, {"figure_path": "https://arxiv.org/html/2501.09891/extracted/6137017/tp2.png", "caption": "Figure 17: Example TravelPlanner prompt and model response with parent solutions given (Part 1)", "description": "This figure displays a prompt used for the TravelPlanner task within the Mind Evolution framework.  The prompt provides background information and instructions to the large language model (LLM), including general instructions, examples of proper formatting for the expected response, and a specific task prompt. The prompt also incorporates \"parent solutions\" which are previous responses from the LLM that failed to fully meet the requirements of the task; this is a key part of the Mind Evolution process. The parent solutions are followed by instructions on how to improve upon those solutions. This aims to guide the LLM towards a more successful plan and showcases the iterative refinement process within the Mind Evolution system.", "section": "A. Implementation Details"}, {"figure_path": "https://arxiv.org/html/2501.09891/extracted/6137017/tp3.png", "caption": "Figure 18: Example TravelPlanner prompt and model response with parent solutions given (Part 2)", "description": "This figure shows a prompt given to a large language model (LLM) for a travel planning task and the LLM's response.  The prompt includes instructions, examples of well-formatted responses, and specific requirements for the plan (including budget, dates, number of people, and preferred cuisines). The parent solutions section shows previous attempts that were deemed inadequate with reasons why.  The figure is part of a larger demonstration of a genetic algorithm used to improve LLM performance in natural language planning tasks.  It is a continuation of Figure 17, suggesting that multiple figures were used to fully display this example due to its length.", "section": "A. Implementation Details"}, {"figure_path": "https://arxiv.org/html/2501.09891/extracted/6137017/tp4.png", "caption": "Figure 19: Example TravelPlanner prompt and model response with parent solutions given (Part 3)", "description": "This figure shows a prompt given to a large language model (LLM) for a travel planning task. The prompt includes instructions and example solutions to guide the LLM. The figure also shows example parent solutions (previously generated plans) and their corresponding issues.  The parent solutions and their problems highlight areas where the LLM should improve. This sets the stage for the LLM to generate a new, improved travel plan based on the examples and feedback. The figure is part of a process to improve LLMs' ability to generate solutions through an iterative process of generating, critiquing, and refining plans, which is described in detail in the paper. ", "section": "4.1 TravelPlanner"}, {"figure_path": "https://arxiv.org/html/2501.09891/extracted/6137017/tp5.png", "caption": "Figure 20: Example TravelPlanner prompt and model response with parent solutions given (Part 4)", "description": "This figure shows a detailed example of the prompt and model response within the TravelPlanner task. Part 4 of the prompt guides the LLM to critically analyze previously proposed travel plans and their associated feedback. It then instructs the LLM to generate a significantly improved travel plan by incorporating the feedback and addressing the identified issues. The prompt includes specific strategies and questions to aid the LLM in improving the plan's quality and efficiency.", "section": "4. Experiments"}, {"figure_path": "https://arxiv.org/html/2501.09891/extracted/6137017/tp6.png", "caption": "Figure 21: Example TravelPlanner prompt and model response with parent solutions given (Part 5)", "description": "This figure shows a specific example of the Mind Evolution process applied to the TravelPlanner task.  It displays the prompt given to the LLM, which includes instructions, examples, the problem statement, and previous failed attempts (parent solutions) with feedback. The response section shows \"Jane's Analysis\", where the LLM critically evaluates the previous solutions, identifying weaknesses and suggesting improvements. Then, \"John's Reasoning\" presents the LLM's improved plan, along with a step-by-step explanation of the reasoning process. This illustrates the iterative refinement and critical thinking capabilities of the Mind Evolution method. This is part 5 of a multi-part figure.", "section": "4.1. TravelPlanner"}, {"figure_path": "https://arxiv.org/html/2501.09891/x11.png", "caption": "Figure 22: Example TravelPlanner prompt and model response with parent solutions given (Part 6)", "description": "This figure shows a detailed example of the Mind Evolution process applied to the TravelPlanner task.  Part 6 of the prompt and response exchange between the LLM and the evaluator is displayed. This section illustrates how the LLM, in the role of 'author', refines a candidate solution based on feedback from the critic's analysis. The feedback highlights issues with the previous plan, such as exceeding budget and accommodation selection problems. The 'author' then proposes a revised travel plan that addresses these issues by incorporating cost-effective alternatives and ensuring adherence to constraints. The provided JSON structure demonstrates the format for expressing the travel plans.", "section": "4.1. TravelPlanner"}, {"figure_path": "https://arxiv.org/html/2501.09891/x12.png", "caption": "Figure 23: The Meeting Planning evaluation function (part 1).", "description": "This figure shows the first part of the Python code for the Meeting Planning evaluation function.  This function evaluates the quality of a proposed meeting plan, considering factors such as time constraints, travel distances, and the duration of meetings. The code iterates through the plan steps, parsing information about travel times, waiting periods, and meeting durations. It checks for inconsistencies (e.g., meeting times conflicting with schedules or travel times exceeding available time) and calculates a score reflecting the plan's quality. The first part focuses on parsing the plan steps and handling time calculations.", "section": "A.2 Evaluation Functions"}, {"figure_path": "https://arxiv.org/html/2501.09891/x13.png", "caption": "Figure 24: The Meeting Planning evaluation function (part 2).", "description": "This figure shows the second part of the Python code implementing the evaluation function for the Meeting Planning task in the Mind Evolution algorithm.  The code evaluates the quality of a proposed plan by checking constraints (e.g., scheduling conflicts, travel time), ensuring consistency with the format, and providing textual feedback. It handles various scenarios like travel time calculations, waiting periods, and meeting time verifications, assigning scores and feedback messages accordingly. The evaluation function leverages the previously defined variables and structures from part 1 of the function.", "section": "3. Method"}]