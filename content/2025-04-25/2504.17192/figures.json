[{"figure_path": "https://arxiv.org/html/2504.17192/x3.png", "caption": "Figure 1: (a) PaperCoder overview. The proposed PaperCoder aims to transform given scientific papers (in machine learning domains) into code repositories, which consists of three sequential steps: planning, analyzing, and coding. (b) Code availability. The availability of the code repositories, where blue bars indicate the total number of accepted papers and orange regions represent the subset of papers with officially released code.", "description": "Figure 1(a) illustrates the PaperCoder framework's three-stage process: planning (high-level roadmap creation, system architecture design, dependency identification, configuration file generation), analysis (interpretation of implementation details), and code generation (creation of modular, dependency-aware code).  Figure 1(b) presents a bar chart showing the code availability in top machine learning conferences (ICLR, NeurIPS, ICML) in 2024. The blue bars represent the total number of accepted papers, while the orange sections within those bars indicate the percentage of papers with publicly available code repositories. This highlights the reproducibility challenge addressed by the PaperCoder framework.", "section": "1 Introduction"}, {"figure_path": "https://arxiv.org/html/2504.17192/x4.png", "caption": "Figure 2: PaperCoder framework. (Left) The naive approach, where a model directly generates code from the paper. (Right) PaperCoder framework, which decomposes the task into three stages: (1) Planning, where a high-level implementation plan is constructed based on the paper\u2019s content, including overall plan, architectural design, logic design, and configuration files; (2) Analyzing, where the plan is translated into detailed file-level specifications; and (3) Coding, where the final codes are generated to implement the paper\u2019s methods and experiments.", "description": "This figure illustrates the PaperCoder framework, contrasting it with a naive approach.  The naive approach shows a single model attempting to directly generate code from a research paper. This is shown on the left side of the image. The right side of the image shows the PaperCoder framework, which is a three-stage process that includes: (1) Planning: creating a high-level plan, system architecture diagrams, file dependencies and config files, (2) Analyzing: translating the plan into detailed file-level specifications, and (3) Coding: generating modular, dependency-aware code. This decomposition aims to improve code quality and faithfulness to the original research paper.", "section": "3 Methods"}]