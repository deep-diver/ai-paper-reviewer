[{"figure_path": "https://arxiv.org/html/2503.00714/x1.png", "caption": "Figure 1. SpeQL\u2019s workflow as the user edits the query. Each node represents a SELECT statement. SpeQL structures these nodes as a directed acyclic graph (DAG) and schedules their execution. The colored nodes indicate precomputed subqueries, while the result of the user\u2019s highlighted (cursor-placed) query is previewed to the user.", "description": "This figure illustrates SpeQL's workflow for handling user-edited queries.  Each node in the directed acyclic graph (DAG) represents a SELECT statement within the query. SpeQL precompiles and plans these queries, creating temporary tables where possible to optimize execution time.  Colored nodes highlight those subqueries that have been precomputed.  The system dynamically displays results to the user for the currently highlighted (cursor-selected) part of the query, providing near-instantaneous feedback.", "section": "2 EXAMPLE OF SPEQL EXECUTION"}, {"figure_path": "https://arxiv.org/html/2503.00714/x2.png", "caption": "Figure 2. SpeQL proposes a multi-level optimization hierarchy to mitigate varying degrees of misprediction.", "description": "SpeQL uses a multi-level optimization strategy to handle varying degrees of prediction accuracy from the LLM. Level 0 represents perfect prediction, where the query is precomputed. Level 1 represents partial prediction, where temporary tables that are likely to be used are precomputed. Level 2 represents a basic prefetch of tables and columns likely to be accessed.  The figure illustrates how these levels decrease in performance gains as the prediction accuracy decreases.", "section": "3 SPEQL DESIGN"}, {"figure_path": "https://arxiv.org/html/2503.00714/x3.png", "caption": "Figure 3. SpeQL\u2019s modular architecture.", "description": "SpeQL consists of three modules: a speculator, a scheduler, and a database.  The speculator receives user input from the SQL editor, uses an LLM to predict the query, and then passes the prediction to the scheduler. The scheduler takes the prediction and sends instructions to the database.  The database executes queries and returns results to the editor.  The editor displays the results to the user.", "section": "3 SPEQL DESIGN"}, {"figure_path": "https://arxiv.org/html/2503.00714/x4.png", "caption": "Figure 4. Running example referenced throughout\u00a0\u00a73. SpeQL fetches user input, using a speculator to debug (\u2460), autocomplete (\u2461), and over-project (\u2462). The scheduler receives the superset query and constructs a DAG of query commands (\u2463), dispatches the commands to precompute data structures or intermediate results (\u2464), and evolves the DAG structure as the new input comes (\u2465).", "description": "This figure illustrates the workflow of SpeQL using the TPC-DS Q1 benchmark as an example.  It shows how SpeQL processes a user's incomplete SQL query in six stages: 1) The speculator uses an LLM (Large Language Model) to debug the user's incomplete SQL query (\u2460), correcting syntax errors and making it semantically valid. 2) The speculator uses the LLM to predict what the user might type next to complete the query (\u2461), providing an autocompletion suggestion.  3) The speculator expands the predicted query to include additional columns to ensure that it will cover the user's final query. This process is referred to as 'over-projection' (\u2462). 4) The scheduler receives the resulting 'superset' SQL query and transforms it into a directed acyclic graph (DAG) of smaller, more manageable query commands (\u2463).  5) The scheduler dispatches these commands to the database for precomputation and execution, creating temporary tables and computing partial results (\u2464).  6) Finally, as the user continues typing and editing the query, the DAG evolves (\u2465) to encompass the new portions of the query.  SpeQL continuously previews results from the most recently processed portion of the DAG to the user.", "section": "3 SPEQL DESIGN"}, {"figure_path": "https://arxiv.org/html/2503.00714/x5.png", "caption": "Figure 5. SpeQL serves as an intermediary between the user\u2019s editor and the analytical SQL database.", "description": "SpeQL acts as an intermediary between the user's SQL editor (such as VS Code) and the analytical SQL database.  It manages the entire workflow, receiving user input, employing LLMs for prediction and debugging, and orchestrating the interactions between the user's editor, the LLM(s), the SQL parser (SQLGlot), and the database engine (e.g., Amazon Redshift, Snowflake). The figure visually represents this process flow and highlights the components involved.", "section": "Implementation"}, {"figure_path": "https://arxiv.org/html/2503.00714/x6.png", "caption": "Figure 6. Tree-, mesh-, and linear-like DAGs. Orange vertices represents temporary table creation queries, and blue vertices represents preview queries. The number i represents the vertex created when\nthe last i lines of code are revealed. \u201d0\u201d indicates that the user has completed typing. DAGs of the remaining 100 TPC-DS (tpcds, ) queries are in Appendix (Fig. 13, 14, 15).", "description": "This figure illustrates the different types of directed acyclic graphs (DAGs) generated by SpeQL during the query construction process, categorized as tree-like, mesh-like, and linear-like. Each node in the DAG represents either a temporary table creation query (orange) or a preview query (blue). The number on each node indicates the order in which it was generated as the user types the query, with '0' representing the final, complete query. The figure shows example DAGs for three TPC-DS queries (Query 1, Query 14(b), and Query 41) with different structures. The DAGs for the remaining 100 TPC-DS queries are shown in the appendix.", "section": "3.2 DAG scheduling"}, {"figure_path": "https://arxiv.org/html/2503.00714/x7.png", "caption": "Figure 7. SpeQL significantly reduces query latency. Literature (liu2014effects, ) shows that latency greater than 500ms (vertical dashed lines) significantly degrades user\u2019s performance.", "description": "This figure displays the cumulative distribution function (CDF) plots for query planning, compilation, and execution latency across three different dataset sizes (10GB, 100GB, and 1000GB).  The x-axis represents latency in milliseconds (ms) on a logarithmic scale. The y-axis shows the percentage of queries that completed within a given latency.  Two sets of curves are shown for each dataset size: one for the baseline system (without speculative execution) and one for SpeQL (with speculative execution).  Vertical dashed lines at 500ms highlight the latency threshold identified in prior research as significantly impacting user experience. The plots illustrate SpeQL's substantial reduction in query latency, especially at higher dataset sizes, and demonstrate that the vast majority of SpeQL queries fall below the 500ms performance threshold, unlike the baseline system which has a significant number of queries that take longer than 500ms.", "section": "5.2 Benchmarking"}, {"figure_path": "https://arxiv.org/html/2503.00714/x8.png", "caption": "Figure 8. Overhead breakdown for each input. \"#i\" represents the time spent when the last i lines of code are revealed. The database time encompasses both temporary table creation and preview query running time (we measure them during the first run, see \u00a75.1.6). The blue and green curves exclude timeouts, while the blue curve further omits planning/compilation time. The blue and orange horizontal axis lines are the baseline\u2019s.", "description": "Figure 8 breaks down the time spent in different parts of SpeQL's query processing pipeline for TPC-DS queries at various stages of user input (revealed lines of code).  It shows the time spent on database operations (including temporary table creation and preview query execution), LLM inference, and total processing time.  Different curves illustrate the impact of timeouts on query processing and planning/compilation time.  The baseline (no speculation) is also presented for comparison.", "section": "5.2 Benchmarking"}, {"figure_path": "https://arxiv.org/html/2503.00714/x9.png", "caption": "Figure 9. LLM inference overhead. \"#i\" represents the cumulative time since the last i lines of code are revealed.", "description": "Figure 9 illustrates the cumulative time spent on LLM inference as more lines of code are added to a SQL query. The x-axis represents the number of lines added, while the y-axis shows the cumulative time.  The figure helps to understand how the LLM's processing time grows as the query becomes more complex and how this relates to the total query time. This is important because it shows a key component of SpeQL's overhead.", "section": "5.2 Low latency"}, {"figure_path": "https://arxiv.org/html/2503.00714/x10.png", "caption": "Figure 10. SpeQL overlaps query processing and user typing. \"#i\" represents the cumulative time since the last i lines of code are revealed.", "description": "Figure 10 illustrates how SpeQL efficiently manages query processing while a user is actively typing.  The x-axis represents the cumulative time elapsed since the last 'i' lines of code were entered, with '#i' indicating the specific point in time. Different curves represent various percentiles (P25, P50, P75) of latency for different query processing stages: planning, compilation, and execution. The figure visually demonstrates SpeQL's ability to overlap these processing stages with user input, minimizing the overall query latency.", "section": "5.2 Low latency"}, {"figure_path": "https://arxiv.org/html/2503.00714/x11.png", "caption": "Figure 11. Case Study. Blue arrows show dependencies.", "description": "This figure presents a case study illustrating SpeQL's workflow. It shows how a user iteratively refines a query, with SpeQL providing intermediate results and debugging assistance.  The blue arrows illustrate dependencies between different query components and temporary tables. The timestamps show how the user typed, SpeQL debugged the query, and the database created the temporary tables. The figure demonstrates SpeQL's ability to overlap query processing time with the user's typing time, reducing latency significantly.", "section": "5.3.2 Utility study"}, {"figure_path": "https://arxiv.org/html/2503.00714/x12.png", "caption": "Figure 12. Utilily/user study. In (a), the boxes represent SpeQL\u2019s latency while the purple triangles represent the baseline\u2019s. In (b), (c), (d), the boxes in group A are SpeQL\u2019s result while that in group B are the baseline\u2019s.", "description": "Figure 12 presents the results of a user study comparing SpeQL's performance against a baseline system.  Panel (a) shows the query latency, comparing SpeQL (boxes) and baseline (purple triangles).  The x-axis represents the latency in milliseconds, and the y-axis represents the cumulative distribution function (CDF). Panels (b), (c), and (d) compare the task completion times and usability scores (using SUS) between two groups of participants: group A used SpeQL, and group B used the baseline system. The boxes represent SpeQL's results and the triangles represent the baseline's results for each task.", "section": "5.3 Utility/user study"}, {"figure_path": "https://arxiv.org/html/2503.00714/x13.png", "caption": "Figure 13. Tree-like DAGs for TPCDS 100GB.", "description": "This figure visualizes the directed acyclic graphs (DAGs) generated by SpeQL for a subset of the TPC-DS benchmark queries (100GB dataset).  Each DAG represents the sequence of temporary table creations and query executions performed by SpeQL as a user progressively constructs a query.  The nodes represent individual SQL statements (temporary table creation or a preview query), and the edges depict dependencies between these statements. The color-coding distinguishes between precomputed temporary tables (orange) and preview queries (blue) executed to show intermediate results. The structure of each DAG reflects the complexity of the corresponding query, with varying levels of nested subqueries and CTEs.", "section": "5.2 Benchmarking"}, {"figure_path": "https://arxiv.org/html/2503.00714/x14.png", "caption": "Figure 14. Mesh-like DAGs for TPCDS 100GB.", "description": "This figure displays a collection of 21 directed acyclic graphs (DAGs). Each DAG represents the execution plan generated by SpeQL for a specific TPC-DS query in the 100GB dataset.  The nodes in the DAGs represent individual SQL queries or temporary table creations, while the edges show dependencies between them.  These DAGs illustrate the mesh-like structure resulting from the decomposition of complex queries into smaller, reusable components. The mesh-like structure is characterized by multiple CTEs and subqueries interacting, unlike tree-like DAGs which exhibit a hierarchical structure, or linear-like DAGs which proceed sequentially.", "section": "3 SPEQL DESIGN"}, {"figure_path": "https://arxiv.org/html/2503.00714/x15.png", "caption": "Figure 15. Linear-like DAGs for TPCDS 100GB.", "description": "This figure presents the dependency graphs for queries in the TPC-DS 100GB benchmark dataset that exhibit linear characteristics.  Linear-like dependency graphs indicate that the query execution is less amenable to speculative execution compared to tree-like or mesh-like structures.  In these linear scenarios, the precomputation of intermediate results and temporary tables is less effective in reducing overall query latency, as there are fewer opportunities to reuse intermediate results for subsequent query refinements.", "section": "5.2 Benchmarking"}]