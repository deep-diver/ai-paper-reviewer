[{"figure_path": "https://arxiv.org/html/2501.08970/x1.png", "caption": "Figure 1: Practical Example of TCME\u00a0in Damage Monitoring: TCME\u00a0can be used to monitor potential damage to business space while preserving privacy. The system, utilizing a pre-agreed model and prompt, analyzes camera recordings. It is restricted to output only \"YES\" if significant damage is detected, ensuring minimal intrusion.", "description": "The figure illustrates a practical application of Trusted Capable Model Environments (TCMEs) in damage monitoring. A landlord wants to monitor their property for damage without infringing on renters' privacy.  A pre-agreed machine learning model within the TCME analyzes camera recordings. The model is designed to only output \"YES\" if significant damage is detected, limiting intrusion and protecting renter privacy. The system demonstrates how TCMEs can balance privacy and security needs by restricting information flow and outputs.", "section": "4. Examples"}, {"figure_path": "https://arxiv.org/html/2501.08970/x2.png", "caption": "Figure 2: TCME can be used to perform auditing of private code and models that are deployed in the TEE and participate in the \u2018attestation\u2019 that includes private components.", "description": "Figure 2 illustrates how a Trusted Capable Model Environment (TCME) can be used to audit private code and models residing within a Trusted Execution Environment (TEE).  The process involves a TCME, incorporating a public model, that receives code for inspection. This code may contain private components that are not shared with external entities.  The TCME assesses the code according to pre-defined criteria (e.g., absence of backdoors, network access restrictions, and non-discriminatory behavior toward users). The results of this evaluation are relayed to an attestation provider, which in turn attests to the integrity of the code based on the TCME's findings.  This setup allows for the verification of the private code without revealing its contents to the auditor.", "section": "4.4. Practical Example 4: Private Code Auditor in TEE Attestation"}, {"figure_path": "https://arxiv.org/html/2501.08970/x3.png", "caption": "Figure 3: Graph coloring verification performed by Gemini-1.5-Flash. The model generally has a high precision (83%) and low recall (14%).", "description": "This figure displays the results of a graph coloring verification task performed using the Gemini-1.5-Flash large language model. The model was presented with various graph coloring solutions, some correct and some incorrect.  The confusion matrix shows the model's performance in classifying solutions as either correct or incorrect.  The model exhibits high precision (83%), meaning that when it predicted a solution to be correct, it was frequently right. However, it had low recall (14%), which means that it missed many truly correct solutions.", "section": "5.2 Comparing with ZKPs"}]