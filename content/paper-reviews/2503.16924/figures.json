[{"figure_path": "https://arxiv.org/html/2503.16924/x2.png", "caption": "Figure 1: Our approach focuses on minimizing storage requirements while using only a minimal number of Gaussian primitives. By proposing an efficient attribute representation, including sub-vector quantization, we achieve scene representations under 5 MB with 600+ FPS rendering. We visualize qualitative examples (left) and the rate-distortion curve evaluated on the Mip-NeRF 360 dataset (right). All rendering speeds were measured on an NVIDIA RTX 3090 GPU, with values in parentheses in the left visualizations measured using an NVIDIA RTX 4090 GPU.", "description": "Figure 1 demonstrates the effectiveness of the proposed Optimized Minimal Gaussian (OMG) representation for 3D scenes.  The left side shows qualitative results, comparing the visual quality of rendered scenes using OMG with other state-of-the-art methods. Note that the FPS values in parentheses were obtained using a more powerful NVIDIA RTX 4090 GPU. The right side presents a rate-distortion curve, illustrating the trade-off between storage size and PSNR (Peak Signal-to-Noise Ratio) achieved by OMG on the Mip-NeRF 360 benchmark dataset. This figure highlights OMG's ability to achieve high-quality rendering with significantly reduced storage requirements (under 5 MB) and high frame rates (over 600 FPS) by optimizing both the number of Gaussian primitives and the efficiency of their attribute representation.", "section": "Introduction"}, {"figure_path": "https://arxiv.org/html/2503.16924/x3.png", "caption": "Figure 2: The overall architecture of our proposed OMG. OMG learns per-Gaussian geometric and appearance features, applying Sub-Vector Quantization (SVQ) to all of them. The SVQ-applied geometric attributes are used for rendering, while the space feature based on the Gaussian center position is integrated into the appearance features to define the final appearance.", "description": "This figure illustrates the architecture of the Optimized Minimal Gaussians (OMG) model.  The OMG model efficiently represents 3D scenes using a minimal number of Gaussian primitives. It learns both geometric (position, scale, rotation) and appearance (static and view-dependent color, opacity) features for each Gaussian.  These features are then compressed using Sub-Vector Quantization (SVQ) to reduce storage. The geometric attributes (after SVQ) are used directly for rendering. A novel spatial feature, derived from the Gaussian's position, is incorporated into the appearance features to improve rendering quality, particularly in areas with sparse Gaussians. This combination balances the need for compact representation with accurate rendering.", "section": "3. Method"}, {"figure_path": "https://arxiv.org/html/2503.16924/x4.png", "caption": "Figure 3: Conceptual diagram of (a) vector quantization, (b) residual vector quantization, and (c) sub-vector quantization. + and \u2295direct-sum\\oplus\u2295 denote the element-wise summation and the vector concatenation.", "description": "This figure illustrates three different vector quantization methods used for compressing Gaussian attributes in 3D Gaussian splatting.  (a) shows standard vector quantization, where the entire attribute vector is encoded using a single codebook.  (b) depicts residual vector quantization, which involves multiple stages of encoding where the residuals from previous stages are encoded.  (c) presents sub-vector quantization, which partitions the attribute vector into multiple sub-vectors and uses separate codebooks for each, reducing the computational complexity of large codebooks while maintaining precision. The '+' symbol represents element-wise summation, and the '\u2295' symbol denotes vector concatenation.", "section": "3. Method"}]