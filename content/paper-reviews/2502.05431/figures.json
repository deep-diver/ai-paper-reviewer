[{"figure_path": "https://arxiv.org/html/2502.05431/x2.png", "caption": "Figure 1: \nOverview of Our Approach. Context-augmented generation leverages additional contexts to improve LLM response quality to user queries.\nSequential encoding prefills selected context chunks as a long sequence during inference, leading to high latency from on-the-fly re-encoding and low accuracy due to context window limitations.\nParallel encoding offers an alternative method to pre-compute more and longer contexts within the same positional range but results in worse performance.\nTo address these challenges, we propose Adaptive Parallel Encoding (APE) to re-align the attention weight distribution of parallel encoding with sequential encoding via three training-free steps: shared prefix, scaling factor, and adaptive temperature, leading to fast and accurate CAG systems in real-world applications.", "description": "Figure 1 illustrates the core concept of Adaptive Parallel Encoding (APE) and its advantages over traditional methods in context-augmented generation (CAG).  It highlights three key approaches: sequential encoding (encoding all contexts as a single sequence, leading to high latency and limited accuracy due to context window limitations), parallel encoding (independently pre-computing contexts, leading to faster inference but lower accuracy due to misalignments in attention), and APE (the proposed method that uses a shared prefix, attention temperature, and scaling factor to align parallel encoding with sequential encoding, achieving both speed and accuracy improvements).  The figure visually represents the workflow of each method, contrasting their performance in terms of inference speed and accuracy.", "section": "1 Introduction"}, {"figure_path": "https://arxiv.org/html/2502.05431/x3.png", "caption": "(a) Retrieval-augmented Generation", "description": "This figure shows the performance comparison of three different context encoding methods (sequential encoding, parallel encoding, and CEPED) on several retrieval-augmented generation (RAG) tasks.  The x-axis represents different RAG tasks, and the y-axis represents the F1 score.  Sequential encoding shows the best performance, while parallel encoding and CEPED both underperform significantly, particularly on tasks that require complex reasoning abilities.", "section": "Observations"}, {"figure_path": "https://arxiv.org/html/2502.05431/x4.png", "caption": "(b) In-context Learning", "description": "This figure displays the results of in-context learning experiments.  It compares the performance of sequential encoding, parallel encoding, and a fine-tuned model (CEPED) across various tasks.  The performance is measured using F1 score and accuracy, enabling a comparison of the different methods' abilities to generalize to various ICL tasks of differing complexity.", "section": "3 Observations"}, {"figure_path": "https://arxiv.org/html/2502.05431/x5.png", "caption": "Figure 2: Comparison of sequential encoding, parallel encoding, and CEPED in RAG and ICL scenarios. Parallel encoding and CEPED degrades performance, especially on tasks such as GSM8K that requires reasoning ability.", "description": "This figure compares the performance of three different context encoding methods: sequential encoding, parallel encoding, and CEPE-Distilled (CEPED), across various retrieval-augmented generation (RAG) and in-context learning (ICL) tasks.  The results show that while parallel encoding offers faster inference times by encoding contexts separately, it significantly reduces accuracy compared to sequential encoding. CEPED, a trainable approach, also underperforms sequential encoding, particularly on tasks requiring complex reasoning, such as GSM8K.  The figure highlights the limitations of parallel encoding and trainable methods in achieving both efficiency and accuracy in context-augmented generation.", "section": "Observations"}, {"figure_path": "https://arxiv.org/html/2502.05431/x6.png", "caption": "Figure 3: Top Left:\nBoth LLaMA-3-8B-Instruct (a) and Mistral-7B-Instruct-v0.3 (b) exhibit a cosine similarity larger than 0.9 for the key states from distinct initial tokens. Top Right: Initial token\u2019s key states show similar negative values to those from other positions for LLaMA-3-8B-Instruct (c) and Mistral-7B-Instruct-v0.3 (d) models. Bottom: Value states exhibit patterns similar to those observed in key states. The X-axis shows positions of key and value states on a logarithmic scale. Visualizations and analyses for more base models are provided in Appendix\u00a011.", "description": "Figure 3 analyzes the distribution of key and value states in LLMs, specifically focusing on the impact of the attention sink.  The top row shows that the initial key states from different samples have a high cosine similarity (above 0.9) for both LLaMA-3-8B-Instruct and Mistral-7B-Instruct-v0.3. The top right demonstrates that initial key states share similar negative values with those from other positions. The bottom row shows that value states exhibit patterns consistent with the observations made for key states.  This analysis uses a logarithmic scale for the x-axis (position of key/value states).  Further analysis for additional LLMs is provided in Appendix B.", "section": "3 Observations"}, {"figure_path": "https://arxiv.org/html/2502.05431/x7.png", "caption": "(a) Query-Key Similarity", "description": "This figure visualizes the cosine similarity between query and key states across different layers and positions. The x-axis represents the position of key states (log scale), while the y-axis shows the cosine similarity.  Different colored lines correspond to different layers in the model. The figure helps to understand how the similarity changes with respect to position. A high similarity indicates strong attention.", "section": "3 Observations"}, {"figure_path": "https://arxiv.org/html/2502.05431/x8.png", "caption": "(b) Key Magnitude", "description": "This figure visualizes the magnitude of key states across different layers of the model and positions within the context.  It shows how the magnitude of key states changes as the position in the sequence increases. This visualization helps to understand the impact of position on the attention mechanism and provides insights into the distribution of attention weights across different parts of the context.", "section": "3 Observations"}, {"figure_path": "https://arxiv.org/html/2502.05431/x9.png", "caption": "(c) Value Magnitude", "description": "This figure visualizes the magnitude of value states across different layers and positions within the attention mechanism.  It shows how the magnitude of value states changes as the position in the context sequence increases. This is important because the magnitude of value states influences their contribution to the final attention weights, and thus the generation of the model's output.  The plot likely shows a trend or pattern in the value state magnitudes, possibly highlighting areas where the magnitudes are unusually high or low. This could indicate important information or potential areas of misalignment that the authors might analyze further in the paper.", "section": "Observations"}, {"figure_path": "https://arxiv.org/html/2502.05431/x10.png", "caption": "(d) Query-Key Product", "description": "This figure visualizes the dot product between query and key states across different layers and positions. It shows that the dot products are generally low except for the initial and recent positions, indicating that the attention mechanism focuses more on tokens at the beginning and end of the context. The X-axis represents the position of key states, and the Y-axis represents the query-key dot product.", "section": "3 Observations"}, {"figure_path": "https://arxiv.org/html/2502.05431/x11.png", "caption": "Figure 4: Visualization of Different Components in Attention. (a)\nThe cosine similarity between query and key states increases as the distance between their positions decreases. (b) The magnitudes of key states show a slowly upward trend as position increases. (c) The magnitude of value states remain constant across positions. (d) Query-key dot products keep consistently low values except at initial and recent positions. A red dashed line marks the anomalous region for the first two tokens in all figures. The X-axis shows positions of KV states on a log scale. Results are measured with the LLaMA-3-8B-Instruct model. Visualizations and analyses for more base models are provided in Appendix\u00a011.", "description": "Figure 4 analyzes the attention mechanism's behavior in LLMs.  Panel (a) shows that the cosine similarity between query and key states is higher for closer positions, indicating stronger attention between nearby tokens. Panel (b) illustrates a gradual increase in the magnitude of key states as position advances.  Panel (c) demonstrates that the magnitudes of value states remain relatively stable across all positions. Panel (d) reveals that the query-key dot products generally remain low, with notable exceptions at the beginning and end of the sequence. The red dashed line highlights the first two tokens, which exhibit atypical behavior. The x-axis represents the position of key/value states on a logarithmic scale, and the results are from the LLAMA-3-8B-Instruct model. Appendix B expands on similar visualizations and analysis for other models.", "section": "3 Observations"}, {"figure_path": "https://arxiv.org/html/2502.05431/x12.png", "caption": "Figure 5: Geometry of Key States.", "description": "This figure visually demonstrates the geometric relationships between key states (vectors) from different contexts in the model.  It shows how the angle between key states from different contexts is significantly larger than the angle between an initial key state and its subsequent states within the same context. This observation helps explain why the attention mechanism in LLMs can naturally create alignments between contexts even when they are processed independently in parallel. The similarity in angles indicates that the key states are not randomly oriented but exhibit a directional consistency.", "section": "3.2 Comparing Parallel Encoding and Sequential Encoding"}, {"figure_path": "https://arxiv.org/html/2502.05431/x13.png", "caption": "Figure 6: Rotation Analysis on the First Token", "description": "This figure shows the impact of rotating the initial token's key states on the model's performance in both sequential and parallel encoding settings.  Different rotation degrees (around random axes) were applied to the initial key states. The x-axis represents the rotation degree, and the y-axis represents the F1 score achieved by the model.  The 'Sequential Encoding' line serves as a baseline, illustrating the model's performance without any rotation.  The 'Parallel Encoding; Same Axis' line shows the results when all contexts use the same rotation axis, while 'Parallel Encoding; Different Axes' shows results when each context gets a unique rotation axis.  The figure demonstrates that while sequential encoding is robust to rotation, parallel encoding exhibits a significant decrease in performance as the rotation degree increases, indicating a greater sensitivity to changes in initial key state orientation. This highlights the potential misalignment issues in parallel encoding, which APE aims to address.", "section": "3.2 Comparing Parallel Encoding and Sequential Encoding"}, {"figure_path": "https://arxiv.org/html/2502.05431/x14.png", "caption": "(a) Sequential", "description": "This figure shows the attention weight distribution within contexts for sequential encoding.  Sequential encoding allocates high attention scores to tokens that are close together in the input sequence, demonstrating the model's sensitivity to the immediate context.  The x-axis shows the position of tokens. This visualization helps to illustrate the typical behavior of attention mechanisms in sequential models, providing a baseline for comparison with other encoding methods shown in subsequent parts of the figure.", "section": "3 Observations"}, {"figure_path": "https://arxiv.org/html/2502.05431/x15.png", "caption": "(b) Parallel (T = 1.0)", "description": "Figure 7(b) displays the attention weight distribution within contexts when using parallel encoding with a temperature (T) of 1.0.  It illustrates how the attention scores are distributed across tokens within each context. This visualization helps to understand the impact of temperature on the attention mechanism and the differences between sequential and parallel encoding.", "section": "3 Observations"}, {"figure_path": "https://arxiv.org/html/2502.05431/x16.png", "caption": "(c) Parallel (T = 0.2)", "description": "This figure shows the distribution of attention weights within contexts when using parallel encoding with an attention temperature (T) of 0.2.  It visually compares this distribution to those shown in Figures 7a and 7b (sequential encoding and parallel encoding with T=1.0, respectively). The x-axis represents the token positions, and the y-axis shows the attention weights. Lowering the temperature (T) to 0.2 makes the distribution sparser, focusing attention on the most relevant tokens. This plot helps to illustrate the effect of adjusting the attention temperature as a step in the Adaptive Parallel Encoding (APE) method to align the attention distribution of parallel encoding with sequential encoding.", "section": "4.2 Adjusting Attention Temperature"}, {"figure_path": "https://arxiv.org/html/2502.05431/x17.png", "caption": "(d) Parallel vs. Sequential", "description": "This figure compares the attention weight distribution within contexts between parallel and sequential encoding methods.  It shows how the parallel encoding, with its inherent distribution of attention scores among neighboring tokens from all contexts, contrasts with the more focused attention distribution of sequential encoding. In particular, it visualizes how adjusting the temperature in parallel encoding (from T=1.0 to T=0.2) can lead to a more sparse distribution, making it closer to that of sequential encoding.", "section": "3 Observations"}, {"figure_path": "https://arxiv.org/html/2502.05431/x18.png", "caption": "Figure 7: Comparison of Attention Weight Distribution within Contexts. (a)\nSequential encoding allocates high attention scores to neighboring tokens. (b) Parallel encoding distributes attention scores more uniform across neighboring tokens from all contexts. (c) Adjusting the temperature T\ud835\udc47Titalic_T sparsifies the distribution. (d) After adjustment, the distribution in parallel encoding becomes similar to sequential encoding. The X-axis represents token positions.", "description": "Figure 7 demonstrates the effects of different encoding methods and temperature adjustments on the distribution of attention weights within contexts. Panel (a) shows that sequential encoding concentrates attention on nearby tokens. In contrast, panel (b) illustrates that parallel encoding distributes attention more uniformly across neighboring tokens from all contexts.  Panel (c) demonstrates how lowering the temperature parameter (T) makes the attention distribution sparser. Finally, panel (d) shows that after temperature adjustment, the attention weight distribution in parallel encoding closely resembles that of sequential encoding. The horizontal axis of all subplots represents the position of the tokens.", "section": "Observations"}, {"figure_path": "https://arxiv.org/html/2502.05431/x19.png", "caption": "Figure 8: Parallel w/ Different T\ud835\udc47Titalic_T.", "description": "This figure visualizes the effect of different attention temperatures (T) on the LogSumExp value, a key component in the attention mechanism of the Adaptive Parallel Encoding (APE) model.  It illustrates how changing the temperature impacts the distribution of attention weights across various layers of the model, specifically showing how the LogSumExp value changes as the temperature parameter is varied from 1.0 to 0.1.  Different curves represent the results for distinct layers within the model.", "section": "4.3 Adding Scaling Factor"}, {"figure_path": "https://arxiv.org/html/2502.05431/x20.png", "caption": "(a) Llama-3-8B-Instruct", "description": "This figure (Figure 11 in the paper) displays the cosine similarity between key states from different samples in each position across various layers for four different language models. The X-axis represents the positions of key states on a logarithmic scale.  The purpose is to visualize the alignment and misalignment between parallel encoding and sequential encoding, highlighting the similarity of key states across different samples, especially in later layers, for LLAMA-3-8B-INSTRUCT, LLAMA-3.1-8B-INSTRUCT, and MISTRAL-7B-INSTRUCT-V0.3. This similarity is strong evidence that parallel encoding can work because of the inherent alignments between KV states from different positions in independent contexts.", "section": "3 Observations"}, {"figure_path": "https://arxiv.org/html/2502.05431/x21.png", "caption": "(b) Llama-3.1-8B-Instruct", "description": "The figure is a visualization of the cosine similarity between key states from distinct initial tokens in the LLAMA-3.1-8B-Instruct model.  The cosine similarity is measured for each layer of the model and plotted against various positions.  This graph helps to show the degree of similarity between different samples across positions within the model. This is part of the analysis on how parallel encoding and sequential encoding differ.", "section": "3.2 Comparing Parallel Encoding and Sequential Encoding"}, {"figure_path": "https://arxiv.org/html/2502.05431/x22.png", "caption": "(c) Mistral-7B-Instruct-v0.3", "description": "Figure 11 shows the cosine similarity between key states from different initial tokens across various layers for the Mistral-7B-Instruct-v0.3 model.  The x-axis represents the position of key states on a logarithmic scale. The high cosine similarity values, particularly above 0.8, demonstrate a strong alignment between key states from different initial tokens for most layers and positions, especially in the later layers. This indicates the key states of independent contexts are quite similar, which provides evidence supporting the effectiveness of parallel encoding in this model.", "section": "3 Observations"}, {"figure_path": "https://arxiv.org/html/2502.05431/x23.png", "caption": "(d) Gemma-2-9b-it", "description": "Figure 11(d) presents a visualization of cosine similarity between key states from different samples in each position for the GEMMA-2-9B-IT language model.  The figure shows a graph plotting cosine similarity against position (log scale).  The graph displays the results for eight different layers in the model.  This visualization aims to highlight the degree of similarity between key state vectors from different model instances, providing insights into the stability and consistency of these vectors at various positions within the sequence. The similarity between key states across various model instances shows how well the parallel encoding method maintains the positional information during the pre-computation of KV states.", "section": "3 Observations"}, {"figure_path": "https://arxiv.org/html/2502.05431/x24.png", "caption": "Figure 9: Performance comparison of APE, parallel encoding, and sequential encoding on ICL tasks.", "description": "This figure presents a comparison of the performance of three different context encoding methods on In-Context Learning (ICL) tasks.  The methods compared are Adaptive Parallel Encoding (APE), parallel encoding, and sequential encoding. The performance is evaluated across multiple ICL tasks using different language models (LLaMA-3-8B-INSTRUCT, LLaMA-3.1-8B-INSTRUCT, MISTRAL-7B-INSTRUCT-v0.3, and GEMMA-2-9B-IT) and varying numbers of shots (1-shot, half-shot, and full-shot). The results are displayed in terms of accuracy, highlighting the relative strengths and weaknesses of each encoding method in different ICL scenarios.", "section": "5.2 In-context Learning"}, {"figure_path": "https://arxiv.org/html/2502.05431/x25.png", "caption": "(a) Prefill Time (bsz=1)", "description": "This figure shows the time taken to pre-process (prefill) the context for a given model before generating text.  The experiment is run with a batch size of 1. The x-axis represents the length of context (in tokens), ranging from 4K to 128K. The y-axis represents the prefilling time in seconds.  Multiple lines represent different methods used for pre-processing: Sequential Encoding, MInference, and APE (Adaptive Parallel Encoding). Comparing the lines shows how APE performs against these other methods in terms of speed of context pre-processing.", "section": "5 Experiments"}, {"figure_path": "https://arxiv.org/html/2502.05431/x26.png", "caption": "(b) Prefill Time (bsz=4)", "description": "This figure shows the prefilling time taken for different context lengths (4K, 8K, 16K, 32K, 64K, and 128K tokens) using a batch size of 4.  The prefilling time is the time it takes to prepare the context (key-value states) before the model can start generating text in response to a user query. The figure compares the prefilling times of three different encoding methods: Sequential encoding, MInference, and APE (Adaptive Parallel Encoding).  By comparing these methods across various context lengths, we can understand the efficiency gains of APE, particularly for longer contexts.", "section": "5.4 Efficiency Evaluation"}, {"figure_path": "https://arxiv.org/html/2502.05431/x27.png", "caption": "(c) Total Time (bsz=1)", "description": "This figure shows the total inference time taken for different context lengths using a batch size of 1.  The total time encompasses both the time to pre-fill the context and the time to generate the response.  It compares the performance of sequential encoding, MInference, and APE (Adaptive Parallel Encoding).  The x-axis represents the context length, and the y-axis represents the total inference time in seconds.", "section": "5.4 Efficiency Evaluation"}, {"figure_path": "https://arxiv.org/html/2502.05431/x28.png", "caption": "(d) Total Time (bsz=4)", "description": "This figure displays the total inference time taken for different context lengths (4K, 8K, 16K, 32K, 64K, and 128K tokens) when using a batch size of 4.  The total time includes both the time to prefill the context and the time to generate the response.  It compares the performance of sequential encoding, MInference, and APE, illustrating the time efficiency gains achieved by APE across varying context lengths.", "section": "5.4 Efficiency Evaluation"}, {"figure_path": "https://arxiv.org/html/2502.05431/x29.png", "caption": "Figure 10: Latency on H100 GPU: prefill and total inference time (s). The gray text in brackets is batch size.", "description": "This figure presents a performance comparison of different context encoding methods on the task of generating text from a long context.  Specifically, it shows the time taken for context pre-filling (preparing the necessary context information) and the total inference time (time to generate the text after pre-filling) for sequential encoding (the traditional method), MInference (an optimized method), and APE (the proposed method). The experiments were run on a H100 GPU with batch sizes of 1 and 4, and various context lengths are tested. The results show that APE significantly reduces both pre-filling time and total inference time compared to sequential encoding and MInference, demonstrating the effectiveness of the proposed method.", "section": "5 Experiments"}, {"figure_path": "https://arxiv.org/html/2502.05431/x30.png", "caption": "Figure 11: For all base models, key states from distinct inital tokens exhibit a large cosine similarity than the following positions, where the LLaMA family even approaches 1. The X-axis shows positions of key states on a logarithmic scale.", "description": "This figure displays the cosine similarity between key states from different initial tokens across various layers and positions within the model.  A high cosine similarity indicates that the key states from different samples have similar directions in vector space.  The observation that cosine similarity is higher for initial tokens compared to later tokens within the same layer suggests a consistent attention pattern.  LLaMA models show near-perfect similarity (approaching 1.0), while other models exhibit strong but not as high similarity (ranging from 0.8 to 0.9).  The x-axis displays the position of the key states on a logarithmic scale, allowing a clear visualization of the similarity patterns across various positions.", "section": "Observations"}, {"figure_path": "https://arxiv.org/html/2502.05431/x31.png", "caption": "Figure 12: Among four models, value states from distinct inital tokens exhibit a large cosine similarity than the following positions, except the first layer and Gemma-2-9b-it. The X-axis shows positions of value states on a logarithmic scale.", "description": "This figure visualizes the cosine similarity between value states from different initial tokens across various layers and positions within four large language models (LLMs): LLAMA-3-8B-Instruct, LLAMA-3.1-8B-Instruct, Mistral-7B-Instruct-v0.3, and Gemma-2-9B-it.  The x-axis represents the position of value states on a logarithmic scale, illustrating how the similarity changes as the position moves away from the initial token. Notably, the plot shows that the cosine similarity between value states of distinct initial tokens is generally high across various layers, except for the first layer and the Gemma-2-9B-it model, indicating a strong similarity in direction and magnitude of value states from different contexts. This observation supports the claim that value states from different contexts can be effectively combined without substantial loss of information.", "section": "3.2 Comparing Parallel Encoding and Sequential Encoding"}, {"figure_path": "https://arxiv.org/html/2502.05431/x32.png", "caption": "Figure 13: For all base models, the similarity between the initial key state and subsequent key states stabilizes as the position increases. The X-axis shows positions of key states on a logarithmic scale.", "description": "This figure displays the cosine similarity between the initial key state and subsequent key states across various positions for four different large language models (LLMs).  The cosine similarity is calculated to measure the similarity in direction and magnitude of the key states across different positions within the same context.  The x-axis represents position on a logarithmic scale, illustrating how quickly the similarity stabilizes for each model, which indicates the consistency of the key state directions within a context.  The y-axis represents the cosine similarity value.", "section": "3 Observations"}, {"figure_path": "https://arxiv.org/html/2502.05431/x33.png", "caption": "Figure 14: For all base models, the similarity between the initial value state and subsequent value states stabilizes as the position increases. The X-axis shows positions of value states on a logarithmic scale.", "description": "This figure visualizes the cosine similarity between the initial value state and subsequent value states across different positions within a sequence for four large language models (LLMs).  The x-axis represents the position of the value state on a logarithmic scale, while the y-axis represents the cosine similarity.  The results show that across all four models, this cosine similarity converges to a nearly constant value after approximately ten tokens. The figure helps demonstrate the stability and consistency of value state representations in LLMs, particularly after the initial few states which exhibit more variation.", "section": "3.2 Comparing Parallel Encoding and Sequential Encoding"}, {"figure_path": "https://arxiv.org/html/2502.05431/x34.png", "caption": "Figure 15: For all base models, the cosine similarity between the query state and past key states stabilizes for most positions, except for the initial and recent key states. The X-axis shows positions of key states on a logarithmic scale.", "description": "This figure visualizes the cosine similarity between the query state and previous key states across different layers and base models. The x-axis represents the positions of key states, plotted on a logarithmic scale.  The results show that cosine similarity generally stabilizes for most positions. However, there are notable exceptions at the initial and most recent positions, indicating that these positions have higher attention weights compared to other positions.", "section": "3 Observations"}]