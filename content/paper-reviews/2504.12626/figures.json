[{"figure_path": "https://arxiv.org/html/2504.12626/x1.png", "caption": "Figure 1: Ablation Variants of FramePack. We present several typical kernel structures of FramePack with commonly used kernel sizes and compression rates. This list does not necessarily cover all popular variants, and more structures can be developed in a similar way.", "description": "Figure 1 illustrates different variations of the FramePack architecture, focusing on the kernel structures used for compressing input frames in video prediction models. Each variation employs different compression rates and kernel sizes, impacting how input frames are processed before being fed into the transformer.  The variations presented are not exhaustive; the authors highlight that numerous other designs are possible.  The figure aims to show the flexibility and adaptability of the FramePack architecture by showcasing commonly used kernel structures and illustrating how the compression rate can be controlled. The core concept is the progressive compression of frames, prioritizing more temporally recent frames over older ones.", "section": "3.1 FramePack"}, {"figure_path": "https://arxiv.org/html/2504.12626/x2.png", "caption": "Figure 2: Visualization of Sampling Approaches. We present sampling approaches to generate frames in different temporal orders. The shadowed squares are the generated frames in each iteration, whereas the white squares are the iteration inputs. Note that only the vanilla approach relies on causal inputs, and both the anti-drifting and inverted anti-drifting approaches receive bi-directional inputs.", "description": "Figure 2 illustrates three different video frame generation approaches: vanilla, anti-drifting, and inverted anti-drifting.  Each approach is visualized using a sequence of squares.  White squares represent input frames used in each iteration of the generation process, while shaded squares show the newly generated frames. The vanilla approach uses only past frames (causal) as inputs, resulting in a strictly sequential generation process.  In contrast, the anti-drifting and inverted anti-drifting methods utilize both past and future frames (bi-directional) as inputs.  The anti-drifting method generates frames sequentially but starts by generating both early and late frames, establishing anchors before filling the middle frames. The inverted anti-drifting method generates frames in reverse chronological order, working backwards from a known, high-quality frame (like an initial image in an image-to-video task).", "section": "3.3 Anti-drifting Sampling"}]