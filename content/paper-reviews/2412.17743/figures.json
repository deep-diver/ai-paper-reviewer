[{"figure_path": "https://arxiv.org/html/2412.17743/x1.png", "caption": "Figure 1: Performance comparison of YuLan-Mini against other base models, based on the average scores across eight benchmarks: GSM8K, MATH-500, HumanEval, MBPP, MMLU, ARC-Challenge, HellaSwag, and CEval.\nFloating Point Operations (FLOPs) are estimated using the scaling law formula C=6\u2062N\u2062D\ud835\udc366\ud835\udc41\ud835\udc37C=6NDitalic_C = 6 italic_N italic_D proposed by\u00a0Kaplan et\u00a0al. (2020), where N\ud835\udc41Nitalic_N is the model size and D\ud835\udc37Ditalic_D is the size of the dataset.\nThe models with a size larger than 3B are plotted in gray.", "description": "This figure showcases the performance of YuLan-Mini, a 2.42B parameter language model, compared to other base models of similar size.  Performance is measured by averaging scores across eight benchmark tasks: GSM8K, MATH-500, HumanEval, MBPP, MMLU, ARC-Challenge, HellaSwag, and CEval.  The x-axis represents the model's approximate computational cost (FLOPs), calculated using the scaling law formula C = 6ND from Kaplan et al. (2020), where N is the model size and D is the dataset size.  Models larger than 3B parameters are shown in gray to highlight YuLan-Mini's competitive performance within its parameter range.", "section": "Introduction"}, {"figure_path": "https://arxiv.org/html/2412.17743/x2.png", "caption": "(a) Training loss.", "description": "The figure shows the training loss curve during the pre-training process of the YuLan-Mini language model.  The x-axis represents the number of training steps, and the y-axis represents the training loss. The curve visually demonstrates how the training loss decreased over time, indicating the effectiveness of the training process. It provides insights into training stability and convergence.", "section": "3 Training Stability"}, {"figure_path": "https://arxiv.org/html/2412.17743/x3.png", "caption": "(b) Gradient norm.", "description": "The figure shows the gradient norm during the model's pre-training process.  It illustrates how the magnitude of gradients changes over the course of training.  The gradient norm is a crucial indicator of training stability; a consistently high gradient norm could indicate instability, while a smooth, decreasing gradient norm suggests stable training.", "section": "Training Stability"}, {"figure_path": "https://arxiv.org/html/2412.17743/x4.png", "caption": "Figure 2: Training loss and gradients during pre-training process.", "description": "This figure visualizes the training stability of the YuLan-Mini model during the pre-training phase.  The left subplot (a) displays the training loss over time, illustrating its decrease and relative stability during the training process. The right subplot (b) presents the gradient norm, another key indicator of training stability.  A consistently low gradient norm is desirable, as it indicates that the model is learning smoothly and not experiencing instability, such as gradient explosions or vanishing gradients.  Analysis of both the training loss and gradient norm provides a comprehensive assessment of the training process' stability.", "section": "2.4 Model Optimization"}, {"figure_path": "https://arxiv.org/html/2412.17743/x5.png", "caption": "(a) Exploding hidden states.", "description": "The figure shows the variance of hidden states across different layers during the training process.  The x-axis represents the training steps, and the y-axis shows the variance (on a log-scale) of the hidden states within different layers (layer 1, layer 7, layer 13, layer 19, layer 25, layer 30).  The plot illustrates an 'exploding' trend where the variance increases dramatically as training progresses, indicating potential instability in the training process. This is contrasted with a similar figure (Figure 3b) showing convergent hidden states, which would represent a stable training process.", "section": "3 Training Stability"}, {"figure_path": "https://arxiv.org/html/2412.17743/x6.png", "caption": "(b) Convergent hidden states.", "description": "Figure 3(b) displays the training dynamics of a convergent trial, illustrating the stability of hidden states and gradient norms throughout the training process. Unlike the divergent trial shown in Figure 3(a), where hidden states variance and gradient norm exhibit an upward trend, this convergent trial demonstrates stable values for these indicators, indicating a well-behaved training process.", "section": "3 Training Stability"}, {"figure_path": "https://arxiv.org/html/2412.17743/x7.png", "caption": "(c) Loss prediction failure.", "description": "Figure 3(c) shows an example where the training process fails to predict the loss accurately.  The y-axis (log scale) represents the loss, while the x-axis shows the number of training steps.  The loss curve deviates significantly from what would be expected during normal training. This deviation may be indicative of problems within the training process such as unstable gradients, exploding gradients, or other numerical instability. In this specific case, this could indicate a failure in the optimization or a problem with the data used for training.", "section": "3 Training Stability"}, {"figure_path": "https://arxiv.org/html/2412.17743/x8.png", "caption": "Figure 3: Comparison of training dynamics between divergent and convergent trial. The y\ud835\udc66yitalic_y-axis denotes the value of the hidden states variance and gradient norm on a log-scale. Both trials have consistent loss, but different trends of hidden states variance and gradient norm.", "description": "This figure illustrates the difference in training dynamics between a successful (convergent) and an unsuccessful (divergent) training run.  While both trials show consistent loss values over time, the key difference lies in the behavior of the hidden state variance and gradient norm.  The y-axis uses a logarithmic scale to display these values.  The figure visually demonstrates that even with similar loss, the variance in hidden states and gradient norms can diverge dramatically in an unstable training process, highlighting the importance of monitoring these metrics for effective training.", "section": "Training Stability"}, {"figure_path": "https://arxiv.org/html/2412.17743/x9.png", "caption": "Figure 4: Variance of LN output of each layers.", "description": "This figure shows the variance of the output of each layer normalization (LN) layer across different layers in the model during training.  It visually represents how much the LN layer's output varies from its mean.  High variance might indicate instability in the training process.", "section": "3 Training Stability"}, {"figure_path": "https://arxiv.org/html/2412.17743/x10.png", "caption": "Figure 5: Attention scores explodes before LN.", "description": "This figure shows that before applying Layer Normalization (LN), the attention scores can explode, leading to instability in training.  The plot likely displays the attention scores across different layers of the model over the course of training.  An exploding attention score implies that the values are significantly large, exceeding a stable range, resulting in unstable or divergent training dynamics.  The figure supports the argument in the paper about the importance of Layer Normalization for stabilizing the model.", "section": "Training Stability"}, {"figure_path": "https://arxiv.org/html/2412.17743/x11.png", "caption": "Figure 6: Ablation experiments on training instability mitigation methods are conducted. We report the average of LAMBADA accuracy of the last three checkpoints of the training and the estimated running time on our 48 A800-GPU cluster. Divergent gradient norm or spiking loss trajectories are shown in red bars, and convergent training is shown in green.", "description": "This ablation study investigates the impact of various training instability mitigation methods on model performance and training time.  The experiment uses LAMBADA accuracy as the evaluation metric, averaging the scores from the last three checkpoints of the training process. Training time is estimated based on a 48 A800-GPU cluster.  Results are visually represented using bar charts, where red bars indicate training instability (divergent gradient norms or loss spikes) and green bars indicate stable training (convergent loss trajectories). This allows for a direct comparison of the effectiveness of different techniques in preventing training issues, and provides insight into the trade-off between performance and computational cost. ", "section": "3.2 Training Instability Mitigation Methods"}, {"figure_path": "https://arxiv.org/html/2412.17743/x12.png", "caption": "(a) Variance of attention values and LN outputs", "description": "The figure shows the variance of Layer Normalization (LN) outputs and attention values over the course of training.  It illustrates how these metrics change with the number of training steps, providing insight into the stability of the training process.  High variance in these values can indicate instability or potential problems during training, such as exploding gradients or other issues that might lead to model failure.", "section": "Training Stability"}, {"figure_path": "https://arxiv.org/html/2412.17743/x13.png", "caption": "(b) Gradient norm and loss trajectory", "description": "The figure shows the gradient norm and loss trajectory during the model's pre-training process.  The gradient norm plot illustrates the magnitude of the gradients during training, indicating the stability of the training process.  A smooth trajectory suggests stable training, while sharp spikes or oscillations may point to instability. The loss trajectory shows how the model's performance improves over the number of training steps. A steady downward trend indicates successful training, while plateaus or upward trends suggest potential issues. The combined plot allows one to assess the overall training stability and progress simultaneously.", "section": "Training Stability"}, {"figure_path": "https://arxiv.org/html/2412.17743/x14.png", "caption": "Figure 7: The curves of attention value and LN output variances (left) and gradient norm and loss (right). After using QK LayerNorm, we prevent the explosion of attention logits and gradients, keeping the LN output stable around 1 and the loss consistent.", "description": "Figure 7 demonstrates the effectiveness of QK LayerNorm in stabilizing the training process.  The left panel displays the variance of attention values and Layer Normalization (LN) output for each layer.  Before employing QK LayerNorm, the variance of attention scores and LN output would increase excessively with more training steps, reflecting instability.  QK LayerNorm prevents this by maintaining a stable LN output around 1 and preventing the growth of gradients and attention logits. The right panel shows that gradient norms and loss values remain consistent after applying QK LayerNorm.  The stability achieved is crucial for efficient and reliable training of LLMs.", "section": "3 Training Stability"}, {"figure_path": "https://arxiv.org/html/2412.17743/x15.png", "caption": "Figure 8: Illustration of our data filtering pipeline and synthetic generation for reasoning data. The filtering pipeline consists of six steps starting from data collection. Synthetic data generation includes both pretraining data (above the horizontal line) and instruction data (below the line).", "description": "This figure illustrates the YuLan-Mini data processing pipeline.  The top half shows the six steps involved in filtering the real-world data used for pre-training. These steps are data collection, de-duplication, heuristic filtering, topic-based text recall, model-based quality scoring, and decontamination. The bottom half of the figure depicts the synthetic data generation process.  This includes generating both pretraining data and instruction data for math, coding, and scientific reasoning tasks. The synthetic data generation process is further broken down into sub-tasks, including those for mathematical documents, chain-of-thought reasoning, formal mathematical reasoning, program-generated numerical reasoning, competition code synthesis, OSS-Instruct code generation, and scientific chain-of-thought reasoning.", "section": "Data Pipeline"}]