[{"figure_path": "https://arxiv.org/html/2503.17359/extracted/6300123/figure/gf_demo.jpg", "caption": "Figure 1: Demonstration of GameFactory\u00a0(Yu et\u00a0al., 2025)\u2019s ability to generalize action control capabilities learned from Minecraft data to open-domain scenarios. Examples from its homepage showcase various generalized environments where the learned control mechanisms have been successfully applied.", "description": "Figure 1 demonstrates GameFactory's capacity to generalize learned action controls from Minecraft to various open-world settings.  The figure showcases examples from the GameFactory homepage depicting diverse environments where the learned control mechanisms successfully enable agent navigation and interaction.", "section": "3. Why IGV for Generative Game Engine?"}, {"figure_path": "https://arxiv.org/html/2503.17359/x1.png", "caption": "Figure 2: Physics-aware generation capabilities of video models. Top: Examples from Cosmos\u00a0(NVIDIA, 2025) demonstrating physical understanding in diverse scenarios including robotics, autonomous driving, manufacturing, and home environments. Bottom: Human motion examples generated by Kling.", "description": "Figure 2 showcases the physics simulation capabilities of advanced video generation models.  The top half displays examples from NVIDIA's Cosmos (2025) model, illustrating its ability to generate realistic simulations across various domains. These include scenarios featuring robots interacting with objects, self-driving cars navigating complex environments, manufacturing processes, and everyday activities in home settings.  All examples demonstrate the model's understanding and accurate depiction of physical laws. The bottom half presents examples of human motion sequences generated by the Kling model, further highlighting the capacity of these models to accurately simulate complex physical interactions.", "section": "3. Why IGV for Generative Game Engine?"}, {"figure_path": "https://arxiv.org/html/2503.17359/x2.png", "caption": "Figure 3: Proposed framework of Generative Game Engine (GGE).\n(a) Framework of GGE shows the architecture and interactions between modules. (b) Technical keywords of each module.\nThe game examples shown in gray boxes demonstrate typical applications of each module\u2019s capabilities, with detailed analysis provided in the main text.", "description": "This figure illustrates the proposed framework for a Generative Game Engine (GGE).  Part (a) shows a diagram of the GGE architecture, highlighting the interactions between its five core modules: Generation, Control, Memory, Dynamics, and Intelligence, and an additional GamePlay module. Part (b) provides a table listing the technical keywords associated with each module.  Examples of how each module's capabilities are applied in various games are displayed in gray boxes, with further details discussed in the paper.", "section": "4. Framework of Generative Game Engine"}, {"figure_path": "https://arxiv.org/html/2503.17359/x3.png", "caption": "Figure 4: Character control demonstrations from GameNGen\u00a0(Valevski et\u00a0al., 2024), showing interactive gameplay operations in generated videos.", "description": "Figure 4 showcases examples from the GameNGen model (Valevski et al., 2024) demonstrating interactive gameplay.  The figure visually represents how users can control character actions within videos generated by the model, illustrating the model's ability to produce dynamic and responsive game environments.", "section": "3.3. Interactive Generation with User Control"}, {"figure_path": "https://arxiv.org/html/2503.17359/x4.png", "caption": "Figure 5: The Control module of IGV manages player control through two aspect: Navigation Control and Interaction Control.", "description": "This figure illustrates the Control module within the Interactive Generative Video (IGV) framework.  The Control module is responsible for managing player interactions within the game environment. It is divided into two main aspects:\n\n1.  **Navigation Control:** This aspect allows players to navigate the game's virtual world.  This could involve moving a camera, moving a character, or adjusting the player's viewpoint.\n2. **Interaction Control:** This aspect enables players to interact with objects and elements within the game environment.  Examples include picking up items, manipulating objects, breaking objects, or interacting with characters.\n\nThe diagram visually represents these control mechanisms.", "section": "4.3. Control"}, {"figure_path": "https://arxiv.org/html/2503.17359/x5.png", "caption": "Figure 6: The Memory module of IGV consists of two components: static memory and dynamic memory.", "description": "The figure illustrates the Memory module within the Interactive Generative Video (IGV) framework.  This module is crucial for maintaining consistency in generated videos over time. It's divided into two main components: static memory and dynamic memory.  Static memory stores persistent elements of the game world, such as maps, building structures, and character models.  Dynamic memory tracks temporary elements and changes within the game, including character animations, movement, and environmental effects like weather changes. The interplay between static and dynamic memory ensures that generated videos remain coherent and consistent despite changes in game states.", "section": "4. Memory"}, {"figure_path": "https://arxiv.org/html/2503.17359/x6.png", "caption": "Figure 7: The Dynamics module of IGV focuses on two\naspects: physical laws and physics tuning.", "description": "The figure illustrates the Dynamics module within the Interactive Generative Video (IGV) framework. This module is responsible for ensuring that the generated videos adhere to the laws of physics.  It achieves this through two key approaches: (1) the simulation of fundamental physical laws (like gravity, collisions, and momentum) which govern the interactions within the simulated world; (2) the ability to adjust or \"tune\" physics parameters (such as gravity strength or friction) to achieve desired gameplay effects, thus creating flexibility in how the physics within the game world are implemented. The image visually depicts these concepts.", "section": "4.5. Dynamics"}, {"figure_path": "https://arxiv.org/html/2503.17359/x7.png", "caption": "Figure 8: The Intelligence module of IGV implements two aspects: causal reasoning and self-evolution.", "description": "The Intelligence module within the proposed Interactive Generative Video (IGV) framework is responsible for two key functionalities: causal reasoning and self-evolution.  Causal reasoning allows the model to understand and predict long-term consequences within the simulated environment. This means the system can anticipate how changes made by players (or the system itself) will affect the world over time. Self-evolution refers to the model's ability to create and evolve dynamic rules and behaviors within the simulated world.  This could result in the emergence of new civilizations, evolving ecosystems, or other unforeseen events that were not explicitly programmed.", "section": "4.6. Intelligence"}]