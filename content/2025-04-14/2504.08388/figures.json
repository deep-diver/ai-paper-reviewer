[{"figure_path": "https://arxiv.org/html/2504.08388/x1.png", "caption": "Figure 1: Illustrations of MineWorld model architecture. Visual and action tokenizers convert game states and actions into discrete tokens, which are concatenated and fed into a Transformer decoder as the input. The Transformer is then trained with an autoregressive objective.", "description": "MineWorld's architecture is illustrated in this figure. Game states (visual information) and actions are converted into discrete tokens by visual and action tokenizers, respectively. These tokens are concatenated and fed to a Transformer decoder, which predicts the subsequent tokens (next game states) in an autoregressive manner. The model is trained to predict these subsequent tokens accurately, effectively learning the relationship between actions and their consequences on game state.", "section": "2 FRAMEWORK"}, {"figure_path": "https://arxiv.org/html/2504.08388/x2.png", "caption": "Figure 2: An illustration of two decoding algorithms. The game state is encoded into 12121212 tokens. The number in each token represents that in which decoding iteration it is generated. (a) Autoregressive decoding, which follows a raster scanned order and generates each token sequentially. (b) Our proposed parallel decoding. For each generated token, the tokens in the adjacent rows and columns will be generated simutaneously in the next iteration.", "description": "This figure illustrates two different decoding algorithms for processing game states represented as tokens.  In autoregressive decoding (a), tokens are processed sequentially in a raster scan pattern, like reading a book from left to right and top to bottom. This is slow. In the proposed parallel decoding method (b), multiple tokens are processed simultaneously. After a token is generated, its horizontally and vertically adjacent tokens are generated in parallel in the next iteration. This significantly speeds up the process, making real-time interaction possible.  The numbers inside each token indicate the order in which they're generated.", "section": "2.3 PARALLEL DECODING"}, {"figure_path": "https://arxiv.org/html/2504.08388/x3.png", "caption": "Figure 3: Case study on MineWorld 700700700700M model. The first game state and actions in following steps are provided as input, based on which the model generates consequent game states. For more cases and videos, please visit our project page.", "description": "This figure showcases MineWorld's ability to generate realistic game sequences in Minecraft.  It demonstrates a case study using the 700M parameter model where the initial game state and a series of subsequent actions are fed as input. The model then generates a series of game states, visually demonstrating its ability to accurately follow instructions and produce plausible game environments.  The caption directs the reader to the project page for more examples.", "section": "4.3 Case Study"}, {"figure_path": "https://arxiv.org/html/2504.08388/x4.png", "caption": "Figure 4: Case study on the controllability of MineWorld. Providing the same initial game state and different actions, the model generates different results correspondingly.", "description": "This figure demonstrates MineWorld's ability to generate different game outcomes based on different actions, even when starting from the same initial game state.  It showcases the model's capacity to respond appropriately to various control signals, highlighting the key aspect of controllability in world modeling.  The images illustrate several sequences of game states generated by the model in response to distinct user-provided actions, demonstrating the consistency and accuracy of MineWorld's reaction to varied inputs.", "section": "4.3 Case Study"}, {"figure_path": "https://arxiv.org/html/2504.08388/x5.png", "caption": "Figure 5: Case study on MineWorld as a gaming playing agent. By providing several initial game states and actions\u00a0(splited by the dashed line), MineWorld continues to play the game by itself through generating future game states and actions in an iterative manner.", "description": "This figure demonstrates MineWorld's capability as a gaming agent.  The top half shows initial game states and corresponding actions provided to the model (separated by a dashed line). The bottom half illustrates how MineWorld autonomously continues gameplay by iteratively generating subsequent game states and actions, effectively playing the game without further human intervention.  This showcases the model's ability to predict future game states based on past states and actions, highlighting its predictive and autonomous capabilities.", "section": "4.3 Case Study"}]