[{"figure_path": "https://arxiv.org/html/2501.08970/x1.png", "caption": "Figure 1: Practical Example of TCME\u00a0in Damage Monitoring: TCME\u00a0can be used to monitor potential damage to business space while preserving privacy. The system, utilizing a pre-agreed model and prompt, analyzes camera recordings. It is restricted to output only \"YES\" if significant damage is detected, ensuring minimal intrusion.", "description": "This figure illustrates a practical application of Trusted Capable Model Environments (TCMEs) in damage monitoring for a business space.  A landlord wants to check for damage without infringing on renters' privacy.  A pre-agreed machine learning model, within a secure TCME, analyzes camera recordings.  The model is designed to output only \"YES\" if significant damage is detected, minimizing privacy intrusion. This setup ensures that only necessary information is released, balancing security with privacy concerns.", "section": "Examples"}, {"figure_path": "https://arxiv.org/html/2501.08970/x2.png", "caption": "Figure 2: TCME can be used to perform auditing of private code and models that are deployed in the TEE and participate in the \u2018attestation\u2019 that includes private components.", "description": "This figure illustrates how a Trusted Capable Model Environment (TCME) can be utilized for auditing private code and models residing within a Trusted Execution Environment (TEE).  A public model, deployed outside the TEE, acts as an auditor. The TCME facilitates interaction between the user's private code (which needs auditing), the private model (which might be used by the private code), and the public auditor model. The process involves agreement on prompts for evaluating the private code and model for security risks. The TCME ensures that only the results of the audit (e.g., pass/fail) are revealed, without exposing the private components' specifics.  This method allows for verifying security properties of private components without compromising confidentiality.", "section": "4. Examples"}, {"figure_path": "https://arxiv.org/html/2501.08970/x3.png", "caption": "Figure 3: Graph coloring verification performed by Gemini-1.5-Flash. The model generally has a high precision (83%) and low recall (14%).", "description": "The figure presents a confusion matrix visualizing the performance of the Gemini-1.5-Flash model in verifying graph 3-colorings.  The model demonstrates high precision (83%), correctly identifying true positives, but low recall (14%), indicating many false negatives (failing to identify correctly colored graphs).  This suggests that while the model is accurate when it does identify a correct coloring, it frequently misses correct colorings.", "section": "5.2. Comparing with ZKPs"}]