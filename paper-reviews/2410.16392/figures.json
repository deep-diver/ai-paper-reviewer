[{"figure_path": "2410.16392/figures/figures_2_0.png", "caption": "Figure 1: Organization of this survey. A non-exhaustive list of papers is provided.", "description": "The figure shows the organization of the survey, illustrating the relationships between different sections and the papers covered in each section.", "section": "1 Introduction"}, {"figure_path": "2410.16392/figures/figures_5_0.png", "caption": "Figure 2: Credit assignment: a local vs. a global approach. In backpropagation, the optimizer updates each parameter individually. In trace propagation, the prompt contains the execution trace, which allows it to generate all updated variables in a single call. Note that the loss is a textual feedback. In addition, the gradient of the instruction is not the gradient of the output, but the gradient of the instruction with respect to the gradient of the output.", "description": "This figure illustrates the difference between backpropagation and trace propagation in credit assignment for optimizing compound AI systems using LLMs.", "section": "3.2 Credit Assignment with Dynamic Program Analysis"}, {"figure_path": "2410.16392/figures/figures_5_1.png", "caption": "Figure 2: Credit assignment: a local vs. a global approach. In backpropagation, the optimizer updates each parameter individually. In trace propagation, the prompt contains the execution trace, which allows it to generate all updated variables in a single call. Note that the loss is a textual feedback. In addition, the gradient of the instruction is not the gradient of the output, but the gradient of the instruction with respect to the gradient of the output.", "description": "The figure illustrates the difference between backpropagation and trace propagation in credit assignment for compound AI systems, showing how trace propagation uses the execution trace to update parameters in a single LLM call.", "section": "3.2 Credit Assignment with Dynamic Program Analysis"}]