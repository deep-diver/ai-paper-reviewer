[{"content": "|                          | Llama 3 (1T Tokens) | BLT-Space (6T Bytes) | BLT-Entropy (4.5T Bytes) |\n|--------------------------|---------------------|----------------------|------------------------|\n| **Arc-E**                | 77.6                | 75.4                 | **79.6**                |\n| **Arc-C**                | **53.3**                | 49.8                 | 52.1                 |\n| **HellaSwag**           | 79.1                | 79.6                 | **80.6**                |\n| **PIQA**                 | 80.7                | **81.1**                 | 80.6                 |\n| **MMLU**                 | **58.1**                | 54.8                 | 57.4                 |\n| **MBPP**                 | 40.2                | 37.6                 | **41.8**                |\n| **HumanEval**            | 31.1                | 27.4                 | **35.4**                |\n| **Average**              | 60.0                | 58.0                 | **61.1**                |\n| **Bytes/Patch on Train Mix** | 4.4                | **6.1**                 | 4.5                 |", "caption": "Table 1: Comparison of flop-matched BLT 8B models trained on the BLT-1T dataset comprising high-quality tokens of text and code from publicly available sources, with baseline models using the Llama 3 tokenizer. BLT performs better than Llama 3 on average, and depending on the patching scheme, achieves significant flops savings with a minor reduction in performance.", "description": "This table compares the performance of different 8B parameter language models on various benchmarks.  The models include a baseline Llama 3 model using the standard Llama 3 tokenizer, and two BLT models trained on the same number of bytes but with different patching schemes: BLT-Space (space patching) and BLT-Entropy (entropy patching).  The benchmarks measure zero-shot and few-shot performance on tasks involving common sense reasoning, world knowledge, and code generation. The table shows that BLT models can achieve better average performance than the baseline Llama 3 model while also potentially using significantly fewer FLOPS during inference.", "section": "5.2. Beyond Compute Optimal Task Evaluations"}, {"content": "| Llama 3 |\n| :---: |\n| 1T Tokens |", "caption": "Table 2: Details of models used in the fixed-inference scaling study. We report non-embedding parameters for each model and their relative number compared to Llama 2. We pick model sizes with equal inference flops per byte. We also indicate BPE\u2019s compute-optimal training data quantity and the crossover point where BLT surpasses BPE as seen in Figure\u00a01 (both expressed in bytes of training data). This point is achieved at much smaller scales compared to many modern training budgets.", "description": "This table presents details of the models used in the fixed-inference scaling study, comparing BLT (Byte Latent Transformer) models to Llama 2 and Llama 3 models. It includes information about model parameters, training FLOPS (Floating Point Operations), and training data size. Notably, the table highlights the crossover point where BLT models outperform BPE models in terms of performance and the amount of training data required for this to happen.  The table illustrates that the crossover point occurs at a much smaller scale than is typically used in current large language model training, suggesting the efficiency of the BLT approach.", "section": "5 Scaling Trends"}, {"content": "| BLT-Space |\n|---| \n| 6T Bytes |", "caption": "Table 3: We compare our 8B BLT model to 8B BPE Llama 3 trained on 1T tokens on tasks that assess robustness to noise and awareness of the constituents of language (best result bold). We also report the performance of Llama 3.1 on the same tasks and underline best result overall. BLT outperforms the Llama 3 BPE model by a large margin and even improves over Llama 3.1 in many tasks indicating that the byte-level awareness is not something that can easily be obtained with more data.", "description": "This table presents a comparison of an 8B parameter BLT model with two 8B parameter Llama 3 models on several tasks. One Llama 3 model is trained on 1 trillion tokens while another (Llama 3.1) is trained on 16 trillion tokens. The tasks include the HellaSwag benchmark with several noisy variations where characters are dropped, repeated, substituted, cased differently, or converted to \"antspeak\" (uppercase characters separated by spaces),  the grapheme-to-phoneme task from the Phonology Bench dataset, and the CUTE benchmark with several character manipulation tasks such as character and word insertion/deletion/substitution/swapping, as well as a semantic similarity and orthographic similarity task.  The BLT model outperforms the Llama 3 model trained on the same amount of data by a large margin and even improves over Llama 3.1 trained on much more data in many of the tasks, especially the robustness-to-noise and character manipulation tasks, indicating that the byte-level awareness is hard to learn with BPE-based models even with substantially more training data.", "section": "6. Byte Modeling Improves Robustness"}, {"content": "| BLT-Entropy |\n| :--------: |\n| 4.5T Bytes |", "caption": "Table 4: Performance of 8B BLT and 8B Llama 3 trained for 1T tokens on translating into and from six widely-used languages and twenty one lower resource languages with various scripts from the FLORES-101 benchmark (Goyal et\u00a0al., 2022).", "description": "This table presents the BLEU scores of 8B BLT and 8B Llama 3 models, both trained on 1 trillion tokens, for translation tasks on the FLORES-101 benchmark.  FLORES-101 includes 6 high-resource languages and 21 low-resource languages. The results are separated for translation *into* English and *from* English. This allows for evaluating the models' performance on a diverse range of languages and scripts, highlighting byte modeling's advantages in long-tail generalization.", "section": "Byte Modeling Improves Robustness"}, {"content": "| Llama 2 | Llama 3 | Entropy ps=6 | Entropy ps=8 | Inference FLOPs | Compute Optimal (Bytes) | Crossover (Bytes) |\n|---|---|---|---|---|---|---| \n| 470m | 450m | 610m (1.2x) | 760m (1.6x) | 3.1E8 | 50B | 150B |\n| 3.6B | 3.9B | 5.2B (1.3x) | 6.6B (1.7x) | 2.1E9 | 400B | 1T |", "caption": "Table 5: Initializing the global transformer model of BLT from the non-embedding parameters of Llama 3 improves performance on several benchmark tasks. First three models trained on the Llama 2 data for compute-optimal steps.", "description": "This table compares the performance of different 8B parameter models on several benchmark tasks. It includes models like LLaMA 3, BLT, and a version of BLT initialized from LLaMA 3 weights.  The first three models (LLaMA 3, BLT, BLT initialized from LLaMA 3) are trained on the LLaMA 2 dataset using a compute-optimal training strategy. The last model, LLaMA 3.1, is also included for reference, and it's trained on a significantly larger dataset (15T tokens) than the other models. The results suggest that initializing BLT from pre-trained LLaMA 3 weights leads to improved performance across different tasks.", "section": "Byte Modeling Improves Robustness"}, {"content": "|                     | Llama 3 (1T tokens) | Llama 3.1 (16T tokens) | BLT (1T tokens) |\n|---------------------|--------------------|---------------------|----------------|\n| **HellaSwag Original** | 79.1              | *80.7*               | **80.6**        |\n| **HellaSwag Noise Avg.** | 56.9              | 64.3                | ***64.3***      |\n| &nbsp;&nbsp;&nbsp;&nbsp;**- AntSpeak** | 45.6              | *61.3*               | **57.9**        |\n| &nbsp;&nbsp;&nbsp;&nbsp;**- Drop** | 53.8              | 57.3                | ***58.2***      |\n| &nbsp;&nbsp;&nbsp;&nbsp;**- RandomCase** | 55.3              | 65.0                | ***65.7***      |\n| &nbsp;&nbsp;&nbsp;&nbsp;**- Repeat** | 57.0              | 61.5                | ***66.6***      |\n| &nbsp;&nbsp;&nbsp;&nbsp;**- UpperCase** | 72.9              | 76.5                | ***77.3***      |\n| **Phonology-G2P** | 11.8              | *18.9*               | **13.0**        |\n| **CUTE** | 27.5              | 20.0                | ***54.1***      |\n| &nbsp;&nbsp;&nbsp;&nbsp;**- Contains Char** | 0.0               | 0.0                 | ***55.9***      |\n| &nbsp;&nbsp;&nbsp;&nbsp;**- Contains Word** | 55.1              | 21.6                | ***73.5***      |\n| &nbsp;&nbsp;&nbsp;&nbsp;**- Del Char** | 34.6              | 34.3                | ***35.9***      |\n| &nbsp;&nbsp;&nbsp;&nbsp;**- Del Word** | **75.5**           | *84.5*               | 56.1           |\n| &nbsp;&nbsp;&nbsp;&nbsp;**- Ins Char** | 7.5               | 0.0                 | ***7.6***       |\n| &nbsp;&nbsp;&nbsp;&nbsp;**- Ins Word** | **33.5**           | *63.3*               | 31.2           |\n| &nbsp;&nbsp;&nbsp;&nbsp;**- Orthography** | 43.1              | 0.0                 | ***52.4***      |\n| &nbsp;&nbsp;&nbsp;&nbsp;**- Semantic** | 65                | 0.0                 | ***90.5***      |\n| &nbsp;&nbsp;&nbsp;&nbsp;**- Spelling** | 1.1               | -                   | ***99.9***      |\n| &nbsp;&nbsp;&nbsp;&nbsp;**- Spelling Inverse** | 30.1              | 3.6                 | ***99.9***      |\n| &nbsp;&nbsp;&nbsp;&nbsp;**- Substitute Char** | 0.4               | 1.2                 | ***48.7***      |\n| &nbsp;&nbsp;&nbsp;&nbsp;**- Substitute Word** | 16.4              | 6.8                 | ***72.8***      |\n| &nbsp;&nbsp;&nbsp;&nbsp;**- Swap Char** | 2.6               | 2.4                 | ***11.5***      |\n| &nbsp;&nbsp;&nbsp;&nbsp;**- Swap Word** | 20.1              | 4.1                 | ***21***        |", "caption": "Table 6: Benchmark evaluations of two patching schemes for 8b BLT models and BPE Llama3 baseline. These models are trained on the Llama 2 data for the optimal number of steps as determined by Dubey et\u00a0al. (2024).", "description": "This table presents benchmark results comparing an 8B parameter BPE Llama 3 tokenizer-based model with two 8B parameter BLT models, one with Space patching and the other with Entropy patching.  All models were trained on the Llama 2 dataset for an optimal number of training steps as determined by Dubey et al. (2024).  The metrics used for evaluation include ARC-Easy, ARC-Challenge, HellaSwag, and PIQA. The goal is to demonstrate that dynamic entropy-based patching allows the BLT model to achieve similar or better performance compared to the BPE baseline, despite the simpler patching strategy.", "section": "Scaling Trends"}, {"content": "| Llama 3 |\n|---| \n| (1T tokens) |", "caption": "Table 7: Ablations on the use of Cross Attention for a 1B BLT model trained on 100B bytes. We report bits-per-byte (bpb) on different datasets. We also report bpb on a random sample of the training data (denoted as Train Dist.) The Cross Attn. Enc. and Dec. columns denote which transformer layers the cross-attention block is applied after (or before for the decoder) in the local encoder and decoder respectively.", "description": "This table presents an ablation study on the effects of applying a cross-attention mechanism at different layers within the encoder and decoder modules of a 1B parameter Byte Latent Transformer (BLT) model. The model is trained on 100B bytes of text data.  The table reports the bits-per-byte (bpb) performance of these models on different datasets, including Wikipedia, Common Crawl (CC), Github, and a random sample from the training data distribution (Train Dist).  The table investigates whether applying cross-attention to all layers, the last layer, or the first layer of the encoder and decoder impacts performance. It also includes a \"Pooling Init\" column which indicates an alternative initialization of the cross-attention queries for the final patch representation.", "section": "7 Ablations and Discussion"}, {"content": "| Llama 3.1 |\n| :---: |\n| (16T tokens) |", "caption": "Table 8: Ablations on the use of n-gram hash embedding tables for a 1B BLT model trained on 100B bytes. We find that hash n-gram embeddings are very effective with very large improvements in BPB.\nThe most significant parameter is the per-ngram vocab size and that smaller ngram sizes are more impactful than larger ones.", "description": "This table presents an ablation study on the use of n-gram hash embedding tables for a 1B parameter Byte Latent Transformer (BLT) model trained on 100B bytes.  The table explores different n-gram sizes (3-8) and per-n-gram vocabulary sizes (50k, 100k, 200k, and 400k), evaluating their impact on bits-per-byte (BPB) across various datasets (Wikipedia, Common Crawl, GitHub, and a training data distribution). The results demonstrate that incorporating hash n-gram embeddings significantly improves language modeling performance by reducing BPB. The study also reveals that the vocabulary size allocated to each n-gram is a critical factor, with larger vocabulary sizes generally leading to better performance. Furthermore, smaller n-gram sizes appear to be more influential than larger ones in enhancing performance.", "section": "7 Ablations and Discussion"}, {"content": "| BLT |\n| --- |\n| (1T tokens) |", "caption": "Table 9: \nWhen paired with hash n-gram embeddings, a light-weight local encoder is sufficient. More layers can then be allocated to the decoder for the same cost.", "description": "This table presents an ablation study on the number of encoder and decoder layers in a 1B parameter BLT model trained on 100B bytes.  The study investigates the impact of varying the number of layers in the local encoder and decoder modules on the model's performance, as measured by bits-per-byte (BPB) on a held-out training data set.  The table also includes a condition where n-gram embeddings are not used. The results suggest that when hash n-gram embeddings are employed, a lightweight local encoder with fewer layers is sufficient, and more layers can be allocated to the decoder for improved performance without increasing computational cost.", "section": "7. Ablations and Discussion"}, {"content": "| Language | Language \u2192 English | | English \u2192 Language | |\n|---|---|---|---|---| \n| | Llama 3 | BLT | Llama 3 | BLT |\n| **Arabic** | 22.3 | 24.6 | 10.4 | 8.8 |\n| **German** | 41.3 | 42.0 | 29.8 | 31.2 |\n| **Hindi** | 20.7 | 20.9 | 7.8 | 7.2 |\n| **Italian** | 34.0 | 33.9 | 24.4 | 26.2 |\n| **Vietnamese** | 31.2 | 31.0 | 28.4 | 23.7 |\n| **Thai** | 17.9 | 18.1 | 10.5 | 7.7 |\n| **Armenian** | 1.7 | 6.3 | 0.6 | 0.9 |\n| **Amharic** | 1.3 | 3.1 | 0.4 | 0.5 |\n| **Assamese** | 2.7 | 5.4 | 0.8 | 1.6 |\n| **Bengali** | 4.7 | 12.7 | 1.7 | 4.1 |\n| **Bosnian** | 36.0 | 37.3 | 16.9 | 19.6 |\n| **Cebuano** | 18.2 | 20.6 | 5.8 | 9.1 |\n| **Georgian** | 1.7 | 7.4 | 1.0 | 2.5 |\n| **Gujarati** | 2.0 | 5.8 | 1.0 | 2.2 |\n| **Hausa** | 5.75 | 5.9 | 1.2 | 1.3 |\n| **Icelandic** | 16.1 | 17.9 | 4.8 | 5.3 |\n| **Kannada** | 1.6 | 3.9 | 0.7 | 1.7 |\n| **Kazakh** | 5.6 | 7.0 | 1.0 | 2.6 |\n| **Kabuverdianu** | 20.3 | 20.9 | 5.1 | 6.8 |\n| **Khmer** | 4.4 | 9.5 | 0.8 | 0.8 |\n| **Kyrgyz** | 4.6 | 5.1 | 0.9 | 2.0 |\n| **Malayalam** | 1.8 | 3.5 | 0.7 | 1.4 |\n| **Odia** | 1.6 | 2.7 | 0.8 | 1.1 |\n| **Somali** | 5.0 | 5.0 | 1.1 | 1.4 |\n| **Swahili** | 10.1 | 12.0 | 1.4 | 2.3 |\n| **Urdu** | 9.3 | 9.5 | 2.0 | 1.4 |\n| **Zulu** | 4.7 | 5.0 | 0.6 | 0.5 |\n| **Overall Average** | 12.1 | **14.0** | 5.9 | **6.4** |", "caption": "Table 10: Architectural hyper-parameters for different BLT model sizes that we train for flop-controlled experiments described in this paper.", "description": "This table lists the architectural hyperparameters used for different Byte Latent Transformer (BLT) model sizes in FLOP-controlled experiments. It includes parameters for the local encoder, global latent transformer, and local decoder modules.  Key hyperparameters include the number of layers (l), number of attention heads, hidden dimension (h), number of parameters, and cross-attention parameters (k).  This table is used to detail the architecture of different sized BLT models in FLOP-controlled scaling experiments.  Different configurations are shown for models with 400M, 1B, 2B, 4B, and 8B parameters.  Details for the encoder, global latent transformer, decoder and cross attention modules are broken down for each model size.", "section": "Appendix"}, {"content": "| Task | Prompt | Llama 3 | BLT | \n|---|---|---|---| \n| Substitute Word | Question: Substitute \" and \" with \" internet \" in \" She went to the kitchen and saw two cereals. \". Answer: | She went to the kitchen and saw two cereals. | She went to the kitchen internet saw two cereals. | \n| Swap Char | Question: Swap \" h \" and \" a \" in \" that \". Answer: | that | taht | \n| Substitute Char | Question: Substitute \" a \" with \" m \" in \" page \". Answer: | - | pmge | \n| Semantic Similarity | Question: More semantically related to \" are \": \" seem \", \" acre \". Answer: | acre | seem | \n| Orthographic Similarity | Question: Closer in Levenshtein distance to \" time \": \" timber \", \" period \". Answer: | period | timber | \n| Insert Char | Question: Add an \" z \" after every \" n \" in \" not \". Answer: | znotz | nzot |", "caption": "Table 11: flops for operations used in transformer and BLT models. l\ud835\udc59litalic_l corresponds to layers, h\u210ehitalic_h is the hidden dimension (hksubscript\u210e\ud835\udc58h_{k}italic_h start_POSTSUBSCRIPT italic_k end_POSTSUBSCRIPT with nh\u2062e\u2062a\u2062d\u2062ssubscript\ud835\udc5b\u210e\ud835\udc52\ud835\udc4e\ud835\udc51\ud835\udc60n_{heads}italic_n start_POSTSUBSCRIPT italic_h italic_e italic_a italic_d italic_s end_POSTSUBSCRIPT heads), m\ud835\udc5amitalic_m is the context length, df\u2062f=4subscript\ud835\udc51\ud835\udc53\ud835\udc534d_{ff}=4italic_d start_POSTSUBSCRIPT italic_f italic_f end_POSTSUBSCRIPT = 4 is the feed-forward dimension multiplier, p\ud835\udc5dpitalic_p is the patch size, and r\ud835\udc5fritalic_r is the ratio of queries to keys.", "description": "This table shows FLOPS calculations of basic operations including attention, QKVO, Feed-forward, De-Embedding and Cross-Attention used in transformer and BLT model computations in this paper. The table specifies FLOPS parameters: l (layers), h (hidden dimension), hk (hidden dimension with n_heads), m (context length), dff (feed-forward dimension multiplier where dff=4), p (patch size) and r (ratio of queries to keys). It is assumed that the backward pass uses twice as much FLOPS as the forward pass in FLOPS equations.", "section": "Appendix B"}, {"content": "|                       | Llama 3 8B (220B tokens) | BLT 8B (220B tokens) | BLT from Llama 3.1 8B (220B tokens) | Llama 3.1 8B (15T tokens) |\n| :-------------------- | :----------------------- | :-------------------- | :-------------------------------- | :-------------------------- |\n| **Arc-E**            | 67.4                    | 66.8                 | 66.6                               | 83.4                       |\n| **Arc-C**            | 40.4                    | 38.8                 | 45.8                               | 55.2                       |\n| **HellaSwag**         | 71.2                    | 72.2                 | 76.1                               | 80.7                       |\n| **PIQA**             | 77.0                    | 78.2                 | 77.4                               | 80.7                       |\n| **MMLU**             | 26.5                    | 25.2                 | 63.7                               | 66.3                       |\n| **MBPP**             | 11.8                    | 10.0                 | 38.2                               | 47.2                       |\n| **HumanEval**         | 9.2                     | 7.3                  | 34.2                               | 37.2                       |", "caption": "Table 12: Ablations on the use of frequency-based as well as hash-based n-gram embedding tables for a 1B BLT model trained on 100B bytes.", "description": "This table compares the bits-per-byte (BPB) performance and perplexity of different n-gram embedding strategies in a 1 billion parameter Byte Latent Transformer (BLT) model trained on 100 billion bytes of text. It specifically ablates the use of frequency-based and hash-based n-gram embedding tables, varying parameters like n-gram sizes and vocabulary size. The table also reports perplexity across different text domains like Wikipedia, Common Crawl, Github, and the training data distribution to assess the effectiveness of these strategies. This comparison highlights the efficacy of both n-gram types in enhancing language modeling performance but showcases hash n-gram embeddings as generally more beneficial due to its ability to overcome vocabulary limitations. Further analyses demonstrate that smaller n-gram sizes often yield better performance gains.", "section": "7 Ablations and Discussion"}]