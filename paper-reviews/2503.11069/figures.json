[{"figure_path": "https://arxiv.org/html/2503.11069/x1.png", "caption": "Figure 1: The difference between an API agent and a GUI agent in completing the task \u201cSchedule a 1-hour meeting on Google Calendar for LLM Agent at 4:00 PM on March 8\u201d.", "description": "This figure illustrates the contrasting approaches of API-based and GUI-based LLM agents in scheduling a meeting. The API agent uses a single API call to directly create the event, highlighting its efficiency and reliance on well-defined interfaces.  Conversely, the GUI agent mimics human actions, visually navigating the Google Calendar interface and interacting with its elements (clicking buttons, filling in text fields) before successfully scheduling the meeting. This demonstrates the GUI agent's adaptability but also its slower, more error-prone approach.", "section": "1 Introduction"}, {"figure_path": "https://arxiv.org/html/2503.11069/x2.png", "caption": "Figure 2: The difference between an API agent and a GUI agent in input and output.", "description": "This figure illustrates the key difference between API and GUI agents in how they receive input and produce output.  API agents rely solely on text-based API calls as input and produce actions based on those calls.  GUI agents, however, rely on visual or multimodal inputs such as application screenshots and use actions mimicking human interactions (mouse clicks, keyboard inputs) to manipulate the GUI and produce actions. This highlights the fundamental difference in modality and interaction between the two types of agents.", "section": "2 Background"}, {"figure_path": "https://arxiv.org/html/2503.11069/x3.png", "caption": "Figure 3: An example of a API wapper over a GUI workflow.", "description": "This figure illustrates how an API wrapper can be used to interact with a GUI application.  Instead of directly manipulating GUI elements, the API wrapper acts as an intermediary, translating high-level function calls into a sequence of GUI interactions (like clicks and text entry). This simplifies the process of automating GUI workflows by allowing developers to interact with the application using a more programmatic, API-based approach. The example shows an API wrapper handling the generation of a financial report, a task that might normally require multiple steps within the GUI. This shows the potential of API wrappers in allowing developers to leverage the functionality of GUI-based applications in a more manageable and streamlined manner.", "section": "4.1 API Wrappers Over GUI Workflow"}, {"figure_path": "https://arxiv.org/html/2503.11069/x4.png", "caption": "Figure 4: An example of a unified orchestrator to manage both API and GUI actions.", "description": "This figure illustrates a unified orchestrator that manages both API and GUI actions.  It shows a hybrid approach where an orchestrator decides whether to use API calls or GUI interactions depending on the task's requirements and system capabilities.  This orchestrator uses a workflow, and based on the input, it can make decisions to leverage both API and GUI agents for different parts of the workflow, combining their strengths.", "section": "Convergence and the \u201cHybrid\u201d Approach"}, {"figure_path": "https://arxiv.org/html/2503.11069/x5.png", "caption": "Figure 5: One example of a no-code platform to create workflows integrating both API calls and GUI agents.", "description": "Figure 5 illustrates a no-code platform's workflow design incorporating both API calls and GUI agents.  The workflow visually represents the various stages of an order processing system. It starts with an 'Order Received' event, initiating actions by an API agent that interacts with a 'Payment Gateway' (API call).  Subsequently, an API agent interacts with a 'Shipping Service' (API call). Then a GUI agent performs 'Verification' through visual GUI interaction, before finally reaching 'Completion'. This figure highlights how a no-code platform enables users to integrate both API-driven automation and GUI-driven interactions within a unified workflow, simplifying the development of complex automated processes. ", "section": "4.2 Unified Orchestration Tools"}]