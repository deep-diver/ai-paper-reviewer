[{"page_end_idx": 2, "page_start_idx": 1, "section_number": 1, "section_title": "INTRODUCTION", "details": {"details": "The continual evolution of computer operating systems (OS) and applications has transformed how people work and live, increasing functionality but also the learning curve for users.  Autonomous computer assistants are thus becoming increasingly important.  **Multimodal Large Language Models (MLLMs)** show promise in building these agents, demonstrating remarkable intelligence in handling complex tasks. However, real-world OS environments involve diverse open-ended computer tasks with varied requirements, presenting challenges for existing single generalist or specialized agents.  Current generalist agents lack the specialized capabilities for many tasks, while specialized agents struggle to generalize across diverse applications or broader system environments. This limitation in generalization and specialization is attributed to the lack of consideration for the rich functionality of app stores that continuously expand OS capabilities. The authors argue that specialized generalist agents should mirror this \"app store\" approach, dynamically growing in abilities and handling diverse tasks. ", "first_cons": "Existing agent methods exhibit deficiencies in their generalization and specialization capabilities, especially in handling open-ended computer tasks in real-world environments.", "first_pros": "MLLM-based agents demonstrate remarkable intelligence in handling complex tasks, benefiting from their strong capabilities in planning and reasoning.", "keypoints": ["**Evolution of OS and applications** increased functionality but also learning curve.", "**Autonomous computer assistants** are crucial due to increased complexity.", "**MLLMs** show promise but face challenges in real-world open-ended tasks.", "Current methods lack **generalization and specialization** capabilities.", "App stores provide a model for **scalable integration** of diverse functionalities."], "second_cons": "Current generalist agents underperform due to lack of specialized abilities, while specialized agents struggle to generalize across different applications.", "second_pros": "The \"app store\" approach allows for the continuous enrichment of capabilities and adaptation to rapidly evolving operating systems.", "summary": "The limitations of current computer assistant methods, which lack both generalization and specialization capabilities needed to handle the complexity of real-world OS tasks, highlight the need for a new approach mimicking the scalable and dynamic nature of app stores."}}, {"page_end_idx": 3, "page_start_idx": 3, "section_number": 3, "section_title": "AGENTSTORE", "details": {"details": "AgentStore is a scalable platform for dynamically integrating heterogeneous agents to automate OS tasks.  It uses a novel **MetaAgent** with the **AgentToken** strategy to efficiently manage diverse agents, utilizing their specialized and generalist abilities. AgentStore's architecture consists of three components: **AgentPool**, which stores all available agents; **AgentEnroll**, which defines the integration protocol for adding new agents; and **MetaAgent**, which selects the most suitable agent(s) to complete tasks.  The **AgentToken** strategy, inspired by ToolkenGPT, encodes enrolled agents as learnable token embeddings in MetaAgent's architecture, enabling efficient agent selection and management.  Furthermore, AgentStore employs an automated process with self-instruct to train AgentToken without manual data, enhancing practicality.  AgentStore significantly improves upon previous systems in both generalization and specialization.", "first_cons": "Traditional management methods, such as In-Context Learning (ICL) and full Fine-Tuning (FT), are overwhelmed by the rapidly growing number of agents.", "first_pros": "AgentStore's scalable integration allows it to dynamically adapt to evolving OS environments. It efficiently manages a growing number of agents via MetaAgent with AgentToken.", "keypoints": ["Scalable platform for integrating heterogeneous agents", "Novel MetaAgent with AgentToken for efficient agent management", "Automated self-instruct training for AgentToken", "Significant performance improvement on benchmark tasks"], "second_cons": "The dynamic growth and large number of agents present a challenge for traditional management.", "second_pros": "The AgentToken strategy efficiently manages the agents and enables plug-and-play functionalities, reducing training costs.", "summary": "AgentStore is a scalable platform for dynamically integrating diverse agents to automate OS tasks, using a novel MetaAgent with AgentToken for efficient management and automated training."}}, {"page_end_idx": 9, "page_start_idx": 4, "section_number": 31, "section_title": "FRAMEWORK OVERVIEW", "details": {"details": "AgentStore's architecture comprises three core components: **AgentPool**, a repository for diverse agents; **AgentEnroll**, a protocol for integrating new agents; and **MetaAgent**, a core component responsible for selecting and managing agents to execute tasks.  AgentPool houses a variety of agents, categorized by modality (unimodal or multimodal), source (open-source or closed-source), and interface type (CLI or GUI). The AgentEnroll process establishes a standardized format for registering new agents, encompassing details such as capabilities, limitations, and usage examples.  The MetaAgent acts as the orchestrator, selecting the optimal agent(s) for a given task based on task description, system status, and agent capabilities, facilitating both independent and collaborative task execution.", "first_cons": "The framework overview primarily focuses on the structural components of AgentStore, without delving into the detailed mechanisms of agent selection or task decomposition, which are elaborated in later sections.", "first_pros": "This section clearly lays out AgentStore's high-level architecture, offering a strong foundation for understanding the system's overall functionality.  The descriptions of each component are concise yet informative, providing a clear picture of their roles and interrelationships.", "keypoints": ["AgentStore uses **AgentPool, AgentEnroll, and MetaAgent**.", "**AgentPool** manages diverse agents (unimodal/multimodal, open/closed source, CLI/GUI).", "**AgentEnroll** uses a standardized format for adding new agents.", "**MetaAgent** selects agents for tasks and coordinates their interaction."], "second_cons": "The description of AgentStore is still at a relatively high level, lacking the detailed explanations on how the components actually work together and how the system handles complex, multi-agent tasks.", "second_pros": "The explanation sufficiently covers the high-level architectural aspects, providing a clear and concise overview of the key components involved.  The use of clear and simple language facilitates easy comprehension for a broad audience.", "summary": "AgentStore is a scalable platform for dynamically integrating heterogeneous agents, consisting of an AgentPool, AgentEnroll protocol, and a MetaAgent for intelligent agent selection and management."}}, {"page_end_idx": 9, "page_start_idx": 4, "section_number": 32, "section_title": "METAGENT WITH AGENTTOKEN", "details": {"details": "The MetaAgent uses a novel **AgentToken** strategy to efficiently manage a large and growing number of agents.  Each agent is represented as a token embedding within the MetaAgent's architecture.  For single-agent tasks, the MetaAgent acts as a **router**, directly selecting the most appropriate agent. For multi-agent tasks, it operates in **manager mode**, predicting multiple agent tokens and generating subtasks for each, enabling collaborative task execution.  **Self-instruct** is used to efficiently train AgentToken without extensive manual data annotation.", "first_cons": "Traditional methods like In-Context Learning (ICL) and full Fine-Tuning (FT) become impractical with a large number of agents due to excessive context length and retraining costs.", "first_pros": "AgentToken significantly reduces the context length and retraining costs by encoding agents as tokens within MetaAgent's vocabulary.", "keypoints": ["**AgentToken strategy** efficiently manages many agents.", "**MetaAgent acts as router or manager** based on task complexity.", "**Multi-token prediction** enables collaboration between agents.", "**Self-instruct** automates AgentToken training."], "second_cons": "The success of the manager mode relies on the generalization capabilities of individual agent tokens across various tasks.", "second_pros": "The shift to multi-token prediction, combined with self-instruct, significantly reduces training time and data requirements.", "summary": "The MetaAgent, utilizing a novel AgentToken strategy and operating in router or manager mode depending on task complexity, efficiently selects and coordinates agents for task execution, leveraging self-instruct for efficient training."}}, {"page_end_idx": 10, "page_start_idx": 6, "section_number": 33, "section_title": "TRAINING AGENTTOKEN WITH SELF-INSTRUCT", "details": {"details": "This section details the training process for AgentToken, a novel strategy to efficiently manage numerous agents.  Instead of relying on resource-intensive methods like full fine-tuning or in-context learning, AgentToken uses special tokens representing agents, appended to the MetaAgent's vocabulary.  The training process is automated using self-instruct, generating demonstrations from the MetaAgent itself.  This approach avoids the need for manual data collection and greatly reduces retraining costs.  A greedy algorithm filters new demonstrations using BERTScore to ensure both consistency and diversity, leading to more effective training.", "first_cons": "Requires a limited set of initial demonstrations to start the self-instruct process.  The quality of these initial demonstrations directly impacts the final performance of AgentToken.", "first_pros": "**AgentToken's training is efficient, requiring minimal additional parameters and training time, compared to full fine-tuning or prompt tuning.** This results in a more stable training process, reducing the risk of overfitting. The automated self-instruct process reduces reliance on manual data annotation.", "keypoints": ["AgentToken uses special tokens for efficient agent management.", "Training is automated using self-instruct, eliminating the need for manual data annotation.", "A greedy algorithm with BERTScore filtering improves the quality and diversity of training data.", "The method outperforms full fine-tuning and In-Context Learning in terms of efficiency and effectiveness."], "second_cons": "The automated self-instruct process relies on the MetaAgent's ability to generate high-quality demonstrations.  If the MetaAgent generates poor-quality data, it will negatively affect the performance of AgentToken.   The greedy filtering algorithm might still let some less relevant data in.", "second_pros": "The automated process with self-instruct makes the system more practical, particularly in real-world scenarios where gathering large, manually annotated datasets is unrealistic.  **The AgentToken strategy offers a significant advantage in terms of efficiency and effectiveness compared to other training methods.**", "summary": "AgentToken is trained efficiently and effectively via an automated self-instruct process, using special tokens and a greedy BERTScore-based filtering algorithm to manage numerous agents without extensive manual data annotation."}}, {"page_end_idx": 10, "page_start_idx": 6, "section_number": 4, "section_title": "EXPERIMENTS", "details": {"details": "AgentStore's performance is evaluated on the OSWorld benchmark, demonstrating significant improvements over previous methods (from 11.21% to 23.85% success rate).  Further experiments on APPAgent validate its generalizability across mobile OS platforms, showcasing the importance of scalable heterogeneous agent integration and the AgentToken strategy.  Analysis reveals the crucial role of both agent quantity and diversity, and AgentToken's efficiency and reduced data requirements.  Finally, the MetaAgent's effectiveness as a router and manager is shown through experiments on a newly designed collaborative task benchmark (OSWorld-Multi).", "first_cons": "Previous methods show weaknesses in specific task categories, even with strong base models, indicating limitations in generalization and specialization capabilities.", "first_pros": "AgentStore achieves state-of-the-art results (23.85%) on the OSWorld benchmark, more than doubling the performance of prior methods. Its success is consistent across different application domains and extends to mobile platforms.", "keypoints": ["AgentStore significantly outperforms previous methods on OSWorld benchmark (23.85% vs 11.21%), showcasing the effectiveness of heterogeneous agent integration.", "AgentStore generalizes well to mobile platforms (APPAgent benchmark), demonstrating adaptability.", "AgentToken strategy is efficient and requires less training data than other methods.", "Agent diversity is crucial: more agents improve results, diverse agents are more stable than agents of one type.", "MetaAgent excels as both a router and manager of agents for single and collaborative tasks in OSWorld-Multi benchmark."], "second_cons": "The OSWorld benchmark's limited multi-agent tasks makes thorough evaluation challenging. ", "second_pros": "The new OSWorld-Multi benchmark specifically assesses the collaborative capabilities of AgentStore, showing superior performance compared to other approaches.", "summary": "AgentStore significantly outperforms existing methods on benchmark tasks, highlighting the importance of scalable heterogeneous agent integration and the novel AgentToken strategy for dynamic agent management."}}, {"page_end_idx": 10, "page_start_idx": 10, "section_number": 43, "section_title": "QUALITATIVE ANALYSIS", "details": {"details": "AgentStore's effectiveness is showcased through three diverse real-world examples, demonstrating its ability to handle complex, open-ended tasks that require specialized knowledge and multi-agent collaboration.  The first example involves setting up automatic email forwarding in Thunderbird, showcasing the specialized MailAgent's efficiency in navigating the software. The second illustrates SheetAgent's ability to process spreadsheets, overcoming challenges for generalist agents. The final example highlights AgentStore's capacity for system-wide task decomposition, enabling multiple agents to collaboratively complete complex tasks.  These examples reveal AgentStore's strength in handling both domain-specific tasks and system-wide processes, highlighting its potential as a specialized generalist computer assistant.", "first_cons": "While the examples demonstrate AgentStore's capabilities, they are limited in scope and may not fully represent the complexity of all real-world scenarios.", "first_pros": "The examples clearly illustrate AgentStore's ability to perform complex tasks involving GUI interactions, spreadsheet manipulation, and multi-agent collaboration.  They highlight the system's adaptability to various situations.", "keypoints": ["**Real-world examples** demonstrate AgentStore's capabilities in handling complex tasks.", "**MailAgent** efficiently handles email configuration, showcasing domain expertise.", "**SheetAgent** effectively processes spreadsheets, outperforming generalist agents.", "**Multi-agent collaboration** is highlighted in the final example, showcasing AgentStore's ability to coordinate multiple agents for system-wide tasks.", "The analysis shows **AgentStore's strength in generalization and specialization**, addressing limitations of prior approaches."], "second_cons": "The qualitative analysis relies on a small number of examples and could benefit from a more extensive evaluation to confirm its broader applicability across diverse scenarios.", "second_pros": "The examples demonstrate AgentStore's successful performance in various domains and its potential for seamless multi-agent collaboration, underscoring its potential for real-world applications.", "summary": "AgentStore effectively automates complex computer tasks through specialized agents and multi-agent collaboration, showcasing its potential as a specialized generalist computer assistant."}}]