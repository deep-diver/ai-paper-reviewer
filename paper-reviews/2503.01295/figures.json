[{"figure_path": "https://arxiv.org/html/2503.01295/x1.png", "caption": "Figure 1: \nThe CodeArena framework allows users to interact with the system through APIs. The depicted workflow shows the code submission process.", "description": "CodeArena's architecture is illustrated, highlighting its key components: an API layer for user interaction, runtime environments for code execution, a dynamic evaluation layer that continuously adjusts scores based on overall performance, and a data layer to store solutions and test cases.  The figure walks through the submission process, detailing the steps from problem retrieval to solution evaluation and storage.", "section": "1 Introduction"}, {"figure_path": "https://arxiv.org/html/2503.01295/x2.png", "caption": "Figure 2: Overview of CodeArena. The Green component provides runtime environments for programming languages, capable of accepting either generated code or model prompt as the input, and outputting test results. The Yellow component is the dynamic evaluation unit, updating the LLM weighted ranking score based on each submission result. The Blue and Maroon components are RESTful API GET\u00a0(\u22b2subgroup-of\\lhd\u22b2) and POST\u00a0(\u22b3contains-as-subgroup\\rhd\u22b3) calls, respectively.", "description": "CodeArena's architecture is depicted, highlighting its four main layers:  The green layer shows runtime environments supporting various programming languages.  These runtimes accept either code directly or model prompts and return test results. The yellow layer is the dynamic evaluation unit, which updates model rankings based on submission results using a weighted scoring system.  The blue and maroon components represent the RESTful APIs used for interaction: GET requests for data retrieval and POST requests for data submission.", "section": "3 Code Arena"}, {"figure_path": "https://arxiv.org/html/2503.01295/x3.png", "caption": "Figure 3: Example of Dynamic Point\u00a0(\ud835\udc9f\u2062\ud835\udcab\ud835\udc9f\ud835\udcab\\mathcal{DP}caligraphic_D caligraphic_P) calculation. Each individual model score is influenced by the overall system performance. \ud835\udc9e\u2062\ud835\udcae\ud835\udc9e\ud835\udcae\\mathcal{CS}caligraphic_C caligraphic_S and \u2130\u2062\ud835\udcae\u2130\ud835\udcae\\mathcal{ES}caligraphic_E caligraphic_S are counted only when the model passes (\u2713) all test cases.", "description": "Figure 3 illustrates the calculation of Dynamic Points (DP), a novel scoring metric in CodeArena.  Unlike traditional methods, DP considers the overall system performance, adjusting individual model scores based on the collective performance of all participating models. This dynamic approach mitigates bias caused by benchmark leakage.  The example shows how Challenge Scores (CS) and Efficiency Scores (ES) contribute to the final DP. Note that CS and ES are only awarded if a model passes all test cases for a given problem.", "section": "3 Code Arena"}, {"figure_path": "https://arxiv.org/html/2503.01295/extracted/6247271/images/distribution.png", "caption": "Figure 4: \nWe trace Dynamic Point\u00a0(\ud835\udc9f\u2062\ud835\udcab\ud835\udc9f\ud835\udcab\\mathcal{DP}caligraphic_D caligraphic_P) changes of prominent open-source\u00a0(\u2663\u2663\\clubsuit\u2663) and closed-source(\u2662\u2662\\diamondsuit\u2662) LLMs over checkpoint\u00a0(\ud835\udc9e\u2062\ud835\udcab\ud835\udc9e\ud835\udcab\\mathcal{CP}caligraphic_C caligraphic_P) from 30 July to 30 Nov, 2024.", "description": "This figure shows the trend of Dynamic Points (DP) for various prominent open-source and closed-source Large Language Models (LLMs) over time.  The DP metric is a novel scoring system used in the CodeArena platform, designed to mitigate bias caused by benchmark leakage and provide a more accurate representation of model performance. The x-axis represents time (checkpoints from July 30th to November 30th, 2024), while the y-axis shows the DP score.  Different colored lines represent different LLMs, allowing for a comparison of performance over time. The plot reveals insights into how model performance changes over time and how open-source and closed-source models compare.", "section": "Results and Discussion"}]