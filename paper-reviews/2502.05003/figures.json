[{"figure_path": "https://arxiv.org/html/2502.05003/x1.png", "caption": "Figure 1: The scaling law induced by QuEST when training Llama-family models from 30 to 800M parameters on C4, with quantized weights and activations from 1 to 4 bits, in the 100 tokens/parameter regime (higher compression uses proportionally more data at fixed memory). QuEST allows for stable training at 1-bit weights and activations (W1A1), and the QuEST W4A4 model is Pareto-dominant relative to BF16, with lower loss at lower size.", "description": "This figure illustrates the scaling laws observed when training Llama-family language models using QuEST, a novel quantization-aware training method.  Models ranging in size from 30 million to 800 million parameters were trained on the C4 dataset.  QuEST allows for the use of quantized weights and activations, with bit depths from 1 to 4 bits.  The experiment was conducted in a regime where the number of training tokens was 100 times the number of model parameters.  Importantly, the graph shows that higher compression ratios (fewer bits) require proportionally more training data to achieve comparable performance.  The results demonstrate that QuEST achieves stable training even at the extreme of 1-bit weights and activations (W1A1).  Furthermore, the 4-bit weights and 4-bit activations model (W4A4) trained with QuEST outperforms the baseline BF16 model in terms of achieving lower training loss at a smaller model size (Pareto dominance).", "section": "1. Introduction"}, {"figure_path": "https://arxiv.org/html/2502.05003/x2.png", "caption": "Figure 2: Gradient alignment comparison for a 30M Llama model after training on 2.7B tokens in 8-bit precision.", "description": "This figure displays the cosine similarity between gradients calculated with different methods (Straight-Through Estimator, trust estimation with and without Hadamard Transform) and the true full-precision gradients during the training of a 30M parameter Llama model. The training dataset comprised 2.7B tokens, and all gradients were calculated at 8-bit precision.  The graph shows the alignment for each gradient estimator across different depths (Transformer blocks) in the model.  This helps in visualizing how accurately each method estimates the gradient compared to the true value, providing insight into the effectiveness and stability of these methods during training.", "section": "3. QUEST"}, {"figure_path": "https://arxiv.org/html/2502.05003/x3.png", "caption": "Figure 3: Perplexity (PPL) across bit-widths with QuEST vs. a tuned variant of LSQ on a 30M model. QuEST leads to consistently lower PPL, with the advantage growing with compression.", "description": "This figure compares the perplexity (a measure of how well a language model predicts a sequence of words) achieved by QuEST and LSQ, two different quantization-aware training (QAT) methods, across various bit-widths (the number of bits used to represent model weights and activations).  The experiment uses a 30M parameter language model. The results show that QuEST consistently outperforms LSQ in terms of perplexity, and the improvement becomes more pronounced as the bit-width decreases (higher compression). This demonstrates QuEST's effectiveness in achieving better accuracy at lower precisions compared to a tuned version of LSQ.", "section": "4.2. Comparison to Prior QAT Methods"}, {"figure_path": "https://arxiv.org/html/2502.05003/x4.png", "caption": "Figure 4: Illustration of the efficiency factors eff\u2062(P)/Peff\ud835\udc43\ud835\udc43\\text{eff}(P)/Peff ( italic_P ) / italic_P, arising from our analysis, for different numerical precisions P\ud835\udc43Pitalic_P and formats (INT, FP, INT+sparse). Higher is better. INT4 appears to have the highest efficiency among hardware-supported formats.", "description": "This figure illustrates the efficiency of different numerical precisions and formats used in training large language models.  The efficiency is measured by the ratio eff(P)/P, where eff(P) represents the effective parameter count for a given precision P, normalized by P itself.  INT, FP, and INT+sparse represent integer, floating-point, and integer with sparsity formats, respectively.  The higher the ratio, the more efficient the representation.  The results indicate that INT4 (4-bit integer) offers the highest efficiency among hardware-supported formats, showing its potential advantage in training large language models.", "section": "4.4. Finding the \u201cOptimal\u201d Precision"}, {"figure_path": "https://arxiv.org/html/2502.05003/x5.png", "caption": "Figure 5: Additional scaling laws induced by QuEST: (a, left) compares INT, FP, and INT+sparse formats at 4-bit precision, (b, middle) shows the scaling laws for weight-only quantization, where 2-bit appears to be Pareto-dominant, while (c, right) shows that trust estimation benefits significantly from Hadamard normalization.", "description": "Figure 5 presents three subfigures illustrating different aspects of QuEST's performance at 4-bit precision. Subfigure (a) compares the performance of three different quantization formats: INT (integer), FP (floating point), and INT+sparse (integer with sparsity). Subfigure (b) shows the scaling laws for weight-only quantization and demonstrates that 2-bit precision achieves Pareto-dominance. Subfigure (c) highlights the positive impact of Hadamard normalization on the trust estimation method used in QuEST.", "section": "4. Experimental Validation"}, {"figure_path": "https://arxiv.org/html/2502.05003/x6.png", "caption": "Figure 6: Per-layer speedups for QuEST INT4 vs BF16, on a single RTX 4090 GPU. The results take into account quantization/dequantization costs for QuEST, and include the cost of the Hadamard transform (orange bar). We present results for the 800M 4-bit QuEST model we trained, as well as inference speedups for a proportional 7B-parameter model.", "description": "This figure displays the per-layer speedup achieved by using QuEST INT4 compared to BF16 on a single RTX 4090 GPU.  The speedup is calculated considering the costs associated with quantization and dequantization in QuEST, and also factors in the computational overhead of the Hadamard Transform (represented by the orange bars).  Results are shown for both an 800M parameter 4-bit QuEST model and a proportionally larger 7B-parameter model to demonstrate scalability.", "section": "5. GPU Execution Support for QuEST Models"}, {"figure_path": "https://arxiv.org/html/2502.05003/x7.png", "caption": "Figure 7: End-to-end prefill speedups for QuEST INT4 vs BF16, across different batch sizes, using the 800M parameter model on a single RTX 4090 GPU. As expected, QuEST is most effective for larger batch sizes, where the workload is more compute-bound.", "description": "This figure displays the end-to-end speedup achieved by using QuEST INT4 compared to using BF16 for inference on an 800M parameter model.  The experiment was conducted on a single RTX 4090 GPU, varying the batch size of the input sequences. The results demonstrate that QuEST INT4 offers more significant speedup as the batch size increases. This is expected because larger batch sizes make the computation more compute-bound, allowing QuEST's optimized low-precision operations to show greater performance gains.", "section": "GPU Execution Support for QuEST Models"}, {"figure_path": "https://arxiv.org/html/2502.05003/x8.png", "caption": "Figure 8: Fraction of weights for which M\u03b1\u2217=0subscript\ud835\udc40superscript\ud835\udefc0M_{\\alpha^{*}}=0italic_M start_POSTSUBSCRIPT italic_\u03b1 start_POSTSUPERSCRIPT \u2217 end_POSTSUPERSCRIPT end_POSTSUBSCRIPT = 0 as a function of number of training iterations for a 30M model trained with QuEST.", "description": "This figure shows the fraction of weights masked during training by the QuEST algorithm's trust mask (M\u03b1\u2217=0) over training iterations for a 30M parameter model.  The trust mask is part of QuEST's approach to estimate gradients accurately in low-precision training.  A higher fraction indicates that a larger portion of the weights are considered unreliable for gradient updates during that iteration. Two lines are plotted, one showing the results with the Hadamard Transform (HT) and the other without. The HT is a component of QuEST, and the figure demonstrates its impact on the fraction of masked weights.  The plot also includes a horizontal line showing the theoretically expected fraction of masked weights, assuming the weights follow a standard normal distribution. The comparison highlights how the Hadamard transform improves the approximation of the weight distribution to a normal distribution, leading to a more consistent trust mask.", "section": "A.1. Trust Mask Analysis"}, {"figure_path": "https://arxiv.org/html/2502.05003/x9.png", "caption": "Figure 9: Fraction of masked values retained from an old iteration to a new iteration for a 30M model trained with QuEST W8A8.", "description": "This figure visualizes the persistence of the trust mask in QuEST's training process for a 30M parameter model using 8-bit weights and activations. It displays the percentage of masked values that remain masked from a previous iteration (old mask iteration) to a subsequent iteration (new mask iteration). The figure compares the mask persistence with and without using the Hadamard Transform (HT), demonstrating that the HT makes the masks significantly less persistent.", "section": "A.1. Trust Mask Analysis"}, {"figure_path": "https://arxiv.org/html/2502.05003/x10.png", "caption": "Figure 10: Performance of QuEST as a function of the outer trust scaling factor s\ud835\udc60sitalic_s for a 30M model pretraining.", "description": "This figure illustrates how the performance of the QuEST model varies with changes to the outer trust scaling factor (represented as 's').  The experiment was conducted during the pretraining phase of a 30M parameter model. The x-axis likely shows different values of 's', and the y-axis likely shows a performance metric, potentially validation loss, reflecting the model's performance for each 's' value.  The graph helps determine the optimal 's' value that balances accuracy and stability during training.", "section": "3. QUEST"}, {"figure_path": "https://arxiv.org/html/2502.05003/x11.png", "caption": "Figure 11: Training loss curves for a 30M model trained on 3B tokens with W4A4 bitwidth, comparing QuEST (ours), LSQ, PACT, and BF16. (a) Full training loss curves, showing that QuEST closely follows BF16 and consistently outperforms LSQ, while PACT struggles with high loss. (b) Zoomed-in view of training steps after 1000, excluding PACT for clarity, highlighting that QuEST maintains a lower loss than LSQ throughout training.", "description": "This figure displays the training loss curves for four different methods used to train a 30-million parameter language model on 3 billion tokens.  The methods compared are QuEST, LSQ, PACT, and the baseline BF16 training.  The graph in (a) shows the full training progression, revealing that QuEST's loss curve closely mirrors the baseline BF16 method while consistently outperforming the other methods. PACT demonstrates poor convergence and high loss values.  The graph in (b) provides a zoomed-in view of the loss curves after the first 1000 training steps.  This view focuses on the comparison between QuEST and LSQ, illustrating QuEST's consistent superiority in maintaining a lower training loss.", "section": "4. Experimental Validation"}, {"figure_path": "https://arxiv.org/html/2502.05003/x12.png", "caption": "Figure 12: Hyperparameter search for PACT on a 30M parameter model with 4-bit weights and activations, trained on 10% of the dataset. The search explores different values for learning rate scaling (LR Scale) and alpha weight decay, with validation loss indicated by the color gradient. Lower validation loss (darker colors) corresponds to better configurations.", "description": "This figure displays the results of a hyperparameter search performed for the PACT (Parameterized Clipping Activation) method. The goal was to find optimal settings for a 30-million parameter model using 4-bit weights and activations.  The model was trained on only 10% of the complete dataset. The search space included different values for 'learning rate scaling' and 'alpha weight decay'. The validation loss achieved is visualized using a color gradient, where darker colors represent lower validation loss and therefore better model performance. This heatmap allows for the quick identification of the best hyperparameter combination for this specific model and setting.", "section": "4.1. Implementation Details"}, {"figure_path": "https://arxiv.org/html/2502.05003/extracted/6183871/figures/PACT-hparam-search.png", "caption": "Figure 13: Scaling law\u00a0(5) fit for 3 and 4 bit QuEST with tokens/parameters ratios in {25,50,100}2550100\\{25,50,100\\}{ 25 , 50 , 100 }.", "description": "This figure displays the results of fitting the scaling law model (Equation 5 from the paper) to data obtained from training 3-bit and 4-bit models using the QuEST method.  The x-axis represents model size in Megabits, and the y-axis represents the validation loss on the C4 dataset.  Multiple lines show the results for different ratios of tokens to parameters (25, 50, and 100), illustrating how the relationship between model size and loss changes with varying data-model scaling regimes.", "section": "4.3. Scaling Laws"}, {"figure_path": "https://arxiv.org/html/2502.05003/x13.png", "caption": "Figure 14: Different QuEST precision performance as a function of tokens-to-parameters ratio at a fixed model memory footprint. The gray line indicates a 4-bit optimality threshold.", "description": "This figure displays the performance of QuEST at various precision levels (different bit-widths for weights and activations) in relation to the ratio of training tokens to model parameters.  The key takeaway is that, while maintaining a constant model size (memory footprint), the optimal precision shifts depending on the amount of training data used.  The graph shows how the loss (a measure of model performance) changes as this token-to-parameter ratio increases.  A gray line is included as a visual reference to show where 4-bit precision becomes optimal.", "section": "4.3 Scaling Laws"}]