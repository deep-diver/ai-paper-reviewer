[{"figure_path": "2410.13757/figures/figures_1_0.png", "caption": "Fig. 1. The Illustration of System Overview of MobA. (1) The User give a command and receive the response from MOBA if further instructions are required or the task is completed. (2) The Global Agent (GA) acts as the user's interpreter, which comprehends the user's command and decomposes the task into several easier and clearer sub-tasks through the Plan Module. (3) The Local Agent (LA) acts as the controller of the screen, decides and executes the action with the Action Module. (4) The Reflection Module verifies whether the sub-task is completed by previous execution, and it also reflects whether the sub-goal can be completed after planned and before executed by LA. (5) The Memory Module provides and updates in-context information, such as the relevant historical experience of previous commands and knowledge about the user and installed applications. (6) The optional Expert is a human that initializes several basic memories for the warm startup.", "description": "The figure illustrates the system overview of MobA, a two-level agent system for efficient mobile task automation, showing the interactions between the user, global agent, local agent, memory module, and optional expert.", "section": "3 THE MOBA SYSTEM"}, {"figure_path": "2410.13757/figures/figures_4_0.png", "caption": "Fig. 2. The Illustration of System Workflow of MobA. These dashed lines indicate how a task is completed by decomposed into multiple sub-tasks.", "description": "The figure illustrates the detailed workflow of the MobA system, showing how tasks are decomposed into sub-tasks and processed through various modules including task decomposition, action execution, and reflection.", "section": "3 THE MOBA SYSTEM"}, {"figure_path": "2410.13757/figures/figures_14_0.png", "caption": "Fig. 4. The First Example Case of MobA. MobA decompose the task into several sub-tasks and solve them in sequence. Please note that several unimportant stages during the execution of a sub-task are omitted for clarity. The key features for each part are as follows. Task: Decompose task. Sub-task 1: Execute a sub-task and reflect. Sub-task 2: Re-split sub-task invoked by feasibility assessment. Sub-task 3: Execute a sub-task. Sub-task 4: Re-split sub-task invoked by result reflection.", "description": "The figure illustrates the workflow of MobA in handling a complex task by decomposing it into several sub-tasks, executing them sequentially, and using reflection mechanisms to ensure accuracy.", "section": "5 CASE STUDY"}, {"figure_path": "2410.13757/figures/figures_15_0.png", "caption": "Fig. 5. The Second Example Case of MobA. Please note that several unimportant stages during the execution of a sub-task are omitted for clarity. The key features for each part are as follows. Task: MOBA supports cross-application tasks and can interpret indirect commands. Sub-task 1: Memories are retrieved to select target applications and updated to track the trace. Sub-task 3: MOBA will reflect and try other approaches if the attempt is failed. Sub-task 9 and sub-task 13: Memories are used to choose correct actions.", "description": "The figure illustrates an example workflow of MobA handling a complex task involving multiple applications and demonstrates the use of memory and reflection mechanisms.", "section": "5 CASE STUDY"}, {"figure_path": "2410.13757/figures/figures_26_0.png", "caption": "Fig. 6. An Example Diagram of View-Hierarchy Processing. From left to right are the original image, unprocessed image and processed image. The underlined parts are the properties that are retained after the merge.", "description": "The figure illustrates the process of view-hierarchy processing, showing how redundant information is removed to improve efficiency.", "section": "B VIEW HIERARCHY PROCESSING"}]