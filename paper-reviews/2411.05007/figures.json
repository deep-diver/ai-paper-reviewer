[{"figure_path": "https://arxiv.org/html/2411.05007/x1.png", "caption": "Figure 1: \nSVDQuant is a post-training quantization technique for 4-bit weights and activations that well maintains visual fidelity. On 12B FLUX.1-dev, it achieves 3.6\u00d7 memory reduction compared to the BF16 model. By eliminating CPU offloading, it offers 8.7\u00d7 speedup over the 16-bit model when on a 16GB laptop 4090 GPU, 3\u00d7 faster than the NF4 W4A16 baseline. On PixArt-\u03a3\u03a3\\Sigmaroman_\u03a3, it demonstrates significantly superior visual quality over other W4A4 or even W4A8 baselines. \u201cE2E\u201d means the end-to-end latency including the text encoder and VAE decoder.", "description": "Figure 1 showcases the effectiveness of SVDQuant, a post-training quantization method for 4-bit weights and activations in diffusion models.  The figure presents a comparison of SVDQuant's performance against other quantization techniques and the original 16-bit model across various metrics. Specifically, it highlights SVDQuant's ability to maintain visual fidelity while achieving significant memory reduction (3.6x on the 12B FLUX.1-dev model) and speed improvements (8.7x speedup on a 16GB laptop with a 4090 GPU, and 3x faster than the NF4 W4A16 baseline). The results for PixArt-\u03a3 demonstrate that SVDQuant yields superior visual quality compared to other 4-bit (W4A4 and W4A8) baselines.  The end-to-end (E2E) latency includes the time taken by the text encoder and VAE decoder.", "section": "Introduction"}, {"figure_path": "https://arxiv.org/html/2411.05007/x2.png", "caption": "Figure 2: Computation vs. parameters for LLMs and diffusion models. LLMs\u2019 computation is measured with 512 context and 256 output tokens, and diffusion models\u2019 computation is for a single step. Dashed lines show trends.", "description": "This figure illustrates the relationship between computational cost and model size for both Large Language Models (LLMs) and diffusion models.  For LLMs, the computation is measured using a context length of 512 tokens and generating 256 output tokens.  In contrast, for diffusion models, the computation is calculated for a single step in the generation process. The graph visually represents the rapid increase in computational cost as the model size (measured in billions of parameters) grows. The dashed lines indicate trends, offering insights into the scaling characteristics of these two model types.  This helps to visualize the significantly higher computational intensity of diffusion models compared to LLMs of similar parameter counts.", "section": "Introduction"}, {"figure_path": "https://arxiv.org/html/2411.05007/x3.png", "caption": "Figure 3: \nOverview of SVDQuant. (a) Originally, both the activation \ud835\udc7f\ud835\udc7f{\\bm{X}}bold_italic_X and weight \ud835\udc7e\ud835\udc7e{\\bm{W}}bold_italic_W contain outliers, making 4-bit quantization challenging.\n(b) We migrate the outliers from the activation to weight, resulting in the updated activation \ud835\udc7f^^\ud835\udc7f\\hat{{\\bm{X}}}over^ start_ARG bold_italic_X end_ARG and weight \ud835\udc7e^^\ud835\udc7e\\hat{{\\bm{W}}}over^ start_ARG bold_italic_W end_ARG. While \ud835\udc7f^^\ud835\udc7f\\hat{{\\bm{X}}}over^ start_ARG bold_italic_X end_ARG becomes easier to quantize, \ud835\udc7e^^\ud835\udc7e\\hat{{\\bm{W}}}over^ start_ARG bold_italic_W end_ARG now becomes more difficult.\n(c) SVDQuant further decomposes \ud835\udc7e^^\ud835\udc7e\\hat{{\\bm{W}}}over^ start_ARG bold_italic_W end_ARG into a low-rank component \ud835\udc731\u2062\ud835\udc732subscript\ud835\udc731subscript\ud835\udc732{\\bm{L}}_{1}{\\bm{L}}_{2}bold_italic_L start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT bold_italic_L start_POSTSUBSCRIPT 2 end_POSTSUBSCRIPT and a residual \ud835\udc7e^\u2212\ud835\udc731\u2062\ud835\udc732^\ud835\udc7esubscript\ud835\udc731subscript\ud835\udc732\\hat{{\\bm{W}}}-{\\bm{L}}_{1}{\\bm{L}}_{2}over^ start_ARG bold_italic_W end_ARG - bold_italic_L start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT bold_italic_L start_POSTSUBSCRIPT 2 end_POSTSUBSCRIPT with SVD. Thus, the quantization difficulty is alleviated by the low-rank branch, which runs at 16-bit precision.", "description": "Figure 3 illustrates the core idea of SVDQuant, a novel 4-bit quantization method for diffusion models.  It addresses the challenge of quantizing both activations and weights to 4 bits, which usually leads to significant quality degradation. The figure shows three steps:\n(a) The initial state, where both activations (X) and weights (W) have outliers, making direct 4-bit quantization difficult.\n(b) A smoothing technique is applied to shift outliers from activations to weights. This makes the activations easier to quantize, but creates more severe outliers in the weights.\n(c) SVDQuant decomposes the outlier-rich weights into a low-rank component (L1L2) and a residual. The low-rank component is processed in higher precision (16-bit), while the residual is quantized to 4 bits. This approach significantly reduces quantization errors and maintains image quality.", "section": "4 METHOD"}, {"figure_path": "https://arxiv.org/html/2411.05007/x4.png", "caption": "Figure 4: \nExample value distribution of inputs and weights in PixArt-\u03a3\u03a3\\Sigmaroman_\u03a3. \ud835\udf40\ud835\udf40{\\bm{\\lambda}}bold_italic_\u03bb is the smooth factor. Red indicates the outliers. Initially, both the input \ud835\udc7f\ud835\udc7f{\\bm{X}}bold_italic_X and weight \ud835\udc7e\ud835\udc7e{\\bm{W}}bold_italic_W contain significant outliers. After smoothing, the range of \ud835\udc7f^^\ud835\udc7f\\hat{{\\bm{X}}}over^ start_ARG bold_italic_X end_ARG is reduced with much fewer outliers, while \ud835\udc7e^^\ud835\udc7e\\hat{{\\bm{W}}}over^ start_ARG bold_italic_W end_ARG shows more outliers. Once the SVD low-rank branch \ud835\udc731\u2062\ud835\udc732subscript\ud835\udc731subscript\ud835\udc732{\\bm{L}}_{1}{\\bm{L}}_{2}bold_italic_L start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT bold_italic_L start_POSTSUBSCRIPT 2 end_POSTSUBSCRIPT is subtracted, the residual \ud835\udc79\ud835\udc79{\\bm{R}}bold_italic_R has a narrower range and is free from outliers.", "description": "Figure 4 illustrates the effects of SVDQuant's outlier mitigation process on the weight and activation tensors of the PixArt-\u03a3 model.  The figure shows histograms visualizing the distribution of values in the input activation tensor (X), weight tensor (W), and the tensors after applying smoothing (X^, W^) and SVD decomposition (R).  Initially, both X and W have significant outliers (represented in red).  Smoothing shifts outliers from the activations to the weights, reducing the range of values in X^ but increasing the range and outliers in W^.  Finally, the SVD low-rank branch separates the outliers into a low-rank component (L1L2), leaving the residual (R) with a significantly reduced range and no outliers, making it easier to quantize using 4-bit precision.", "section": "Method"}, {"figure_path": "https://arxiv.org/html/2411.05007/x5.png", "caption": "Figure 5: First 64 singular values of \ud835\udc7e\ud835\udc7e{\\bm{W}}bold_italic_W, \ud835\udc7e^^\ud835\udc7e\\hat{{\\bm{W}}}over^ start_ARG bold_italic_W end_ARG, and \ud835\udc79\ud835\udc79{\\bm{R}}bold_italic_R. The first 32 singular values of \ud835\udc7e^^\ud835\udc7e\\hat{{\\bm{W}}}over^ start_ARG bold_italic_W end_ARG exhibit a steep drop, while the remaining values are much more gradual.", "description": "Figure 5 illustrates the distribution of the first 64 singular values obtained through Singular Value Decomposition (SVD) for three different weight matrices: the original weight matrix \ud835\udc7e (bold_italic_W), the transformed weight matrix \ud835\udc7e\u0302 (over^ start_ARG bold_italic_W end_ARG), and the residual matrix \ud835\udc79 (bold_italic_R).  The plot shows that the transformed weight matrix \ud835\udc7e\u0302 (over^ start_ARG bold_italic_W end_ARG) has a significantly different distribution than the original weight matrix \ud835\udc7e (bold_italic_W). Specifically, the transformed weight matrix has a steeper drop-off in its singular values, where the first 32 values are much larger than the others.  The residual matrix \ud835\udc79 (bold_italic_R), on the other hand, exhibits a much more gradual decrease in singular values. This visual representation highlights the effectiveness of the SVD in separating the dominant components from the less significant ones, which forms the basis for the low-rank branch used in the SVDQuant method. The figure directly supports the method's claim of mitigating outlier effects and reducing the magnitude of values requiring quantization.", "section": "4.2 SVDQuant: Absorbing Outliers via Low-Rank Branch"}, {"figure_path": "https://arxiv.org/html/2411.05007/x6.png", "caption": "Figure 6: \n(a) Na\u00efvely running low-rank branch with rank 32 will introduce 57% latency overhead due to extra read of 16-bit inputs in Down Projection and extra write of 16-bit outputs in Up Projection. Our Nunchaku engine optimizes this overhead with kernel fusion. (b) Down Projection and Quantize kernels use the same input, while Up Projection and 4-Bit Compute kernels share the same output. To reduce data movement overhead, we fuse the first two and the latter two kernels together.", "description": "Figure 6 illustrates the performance optimization achieved by Nunchaku, the co-designed inference engine. (a) shows that a naive implementation of the low-rank branch (rank 32) incurs a significant 57% latency overhead due to redundant memory access for both input and output data.  Nunchaku addresses this by fusing kernels. (b) details Nunchaku's kernel fusion strategy: it merges the Down Projection and Quantization kernels because they share the same input data and merges the Up Projection and 4-bit compute kernels as they share the same output data. This fusion significantly reduces data movement and improves efficiency.", "section": "4.3 NUNCHAKU: FUSING LOW-RANK AND LOW-BIT BRANCH KERNELS"}, {"figure_path": "https://arxiv.org/html/2411.05007/x7.png", "caption": "Figure 7: Qualitative visual results on MJHQ. Image Reward is calculated over the entire dataset. On FLUX.1 models, our 4-bit models outperform the NF4 W4A16 baselines, demonstrating superior text alignment and closer similarity to the 16-bit models. For instance, NF4 misinterprets \u201cdinosaur style,\u201d generating a real dinosaur. On PixArt-\u03a3\u03a3\\Sigmaroman_\u03a3 and SDXL-Turbo, our 4-bit results demonstrate noticeably better visual quality than ViDiT-Q\u2019s and MixDQ\u2019s W4A8 results.", "description": "Figure 7 presents a qualitative comparison of image generation results across different models and quantization methods using the MJHQ dataset.  The 'Image Reward' metric, calculated across the entire dataset, quantifies the overall quality. For the FLUX.1 model, the 4-bit models (using SVDQuant) outperformed the NF4 W4A16 baseline, showing better text alignment and higher similarity to the 16-bit results.  A notable example is the NF4 model's misinterpretation of the prompt \"dinosaur style,\" which resulted in an image of a real dinosaur rather than a stylized one.  In PixArt-\u03a3 and SDXL-Turbo, the 4-bit models from this work also yielded noticeably better visual quality compared to other state-of-the-art 4-bit methods (ViDiT-Q and MixDQ).", "section": "5 Experiments"}, {"figure_path": "https://arxiv.org/html/2411.05007/x8.png", "caption": "Figure 8: \nSVDQuant reduces the model size of the 12B FLUX.1 by 3.6\u00d7. Additionally, our engine, Nunchaku, further cuts memory usage of the 16-bit model by 3.5\u00d7 and delivers 3.0\u00d7 speedups over the NF4 W4A16 baseline on both the desktop and laptop NVIDIA RTX 4090 GPUs. Remarkably, on laptop 4090, it achieves in total 10.1\u00d7 speedup by eliminating CPU offloading.", "description": "This figure presents a comparison of model size, memory usage, and inference speed between different quantization methods applied to the 12B parameter FLUX.1 diffusion model.  It shows that SVDQuant, combined with the Nunchaku inference engine, significantly reduces the model size (by 3.6x compared to the original 16-bit model), memory usage (by 3.5x), and inference time (by 3.0x on desktop GPU and 10.1x on a laptop GPU). The 10.1x speedup on the laptop is attributed to eliminating the need for CPU offloading, a crucial factor in improving the performance of large models on resource-constrained hardware.", "section": "5 Experiments"}, {"figure_path": "https://arxiv.org/html/2411.05007/x9.png", "caption": "Figure 9: \nOur INT4 model seamlessly integrates with off-the-shelf LoRAs without requiring requantization. When applying LoRAs, it matches the image quality of the original 16-bit FLUX.1-dev. See Appendix\u00a0C for the text prompts.", "description": "Figure 9 demonstrates the seamless integration of SVDQuant with off-the-shelf Low-Rank Adapters (LoRAs) without the need for re-quantization.  The figure showcases several examples of images generated using the INT4 quantized model with various LoRAs applied. The results show that the INT4 model, even with the LoRAs, maintains the image quality of the original 16-bit FLUX.1-dev model, highlighting the effectiveness of SVDQuant in preserving image quality across different model configurations.  Specific prompts used to generate these images can be found in Appendix C.", "section": "Integrate with LoRA"}, {"figure_path": "https://arxiv.org/html/2411.05007/x10.png", "caption": "Figure 10: \nAblation study of SVDQuant on PixArt-\u03a3\u03a3\\Sigmaroman_\u03a3. The rank of the low-rank branch is 64. Image Reward is measured over 1K samples from MJHQ. Our results significantly outperform the others, achieving the highest image quality by a wide margin.", "description": "This ablation study investigates the impact of different quantization methods on the PixArt-\u03a3 image generation model.  The experiment uses a low-rank branch with a rank of 64. The performance metric is Image Reward, calculated from 1000 samples of the MJHQ dataset. The results show that SVDQuant significantly outperforms other techniques, such as simple SVD, na\u00efve quantization, smoothing, and LoRC, in terms of image quality. This highlights the effectiveness of SVDQuant's approach in handling outliers and achieving high-quality results in 4-bit quantization.", "section": "5 Experiments"}, {"figure_path": "https://arxiv.org/html/2411.05007/x11.png", "caption": "Figure 11: \nIncreasing the rank r\ud835\udc5fritalic_r of the low-rank branch in SVDQuant can enhance image quality, but it also leads to higher parameter and latency overhead.", "description": "This figure shows the trade-off between increasing the rank (r) of the low-rank branch within the SVDQuant model and the resulting impact on image quality, model size, and inference latency.  Higher ranks generally lead to better image quality because the low-rank branch can absorb more outliers. However, this improvement comes at the cost of increased model size and latency, making it important to find the optimal balance between image quality and efficiency.", "section": "Ablation study"}, {"figure_path": "https://arxiv.org/html/2411.05007/x12.png", "caption": "Figure 12: Qualitative visual results of FLUX.1-dev on MJHQ.", "description": "This figure showcases a qualitative comparison of image generation results from the 12B parameter FLUX.1-dev diffusion model using different quantization methods.  Specifically, it visually demonstrates the impact of various methods (BF16, NF4 W4A16, SVDQuant INT4, and SVDQuant FP4) on the visual quality of generated images.  Each row displays a prompt and the resulting image generated using each method, allowing for direct visual assessment of the quality differences. The prompts and images are selected from the MJHQ dataset, and the goal is to visually demonstrate how well each quantization method preserves the image quality compared to the original, unquantized model.", "section": "5 Experiments"}, {"figure_path": "https://arxiv.org/html/2411.05007/x13.png", "caption": "Figure 13: Qualitative visual results of FLUX.1-schnell on MJHQ.", "description": "This figure shows a qualitative comparison of image generation results from different models on the MJHQ dataset.  Specifically, it compares the quality of images generated by the original 16-bit FLUX.1-schnell model, a weight-only quantized 4-bit version (NF4 W4A16), and the proposed SVDQuant model at 4-bit precision (INT and FP). The prompts used to generate the images are also displayed. The purpose is to visually demonstrate the effectiveness of the proposed method in maintaining image quality despite significant memory and speed improvements.", "section": "5 Experiments"}, {"figure_path": "https://arxiv.org/html/2411.05007/x14.png", "caption": "Figure 14: Qualitative visual results of PixArt-\u03a3\u03a3\\Sigmaroman_\u03a3 on MJHQ.", "description": "This figure showcases a qualitative comparison of image generation results using different quantization methods on the PixArt-\u03a3 model.  It displays several image prompts and compares the outputs generated using the original FP16 precision model against various 4-bit quantization techniques including ViDiT-Q (INT8 and INT4), and the authors' SVDQuant method (INT4 and FP4). The goal is to visually demonstrate the effectiveness of SVDQuant in preserving image quality while using significantly reduced precision for weights and activations. The images allow a visual assessment of the fidelity and detail maintained across different quantization methods.", "section": "5 Experiments"}, {"figure_path": "https://arxiv.org/html/2411.05007/x15.png", "caption": "Figure 15: Qualitative visual results of SDXL on MJHQ.", "description": "This figure displays a qualitative comparison of image generation results from the SDXL model using different quantization methods.  It showcases several example prompts and their corresponding generated images using the original 16-bit SDXL model and several 4-bit quantized versions, including SVDQuant (ours), TensorRT, and MixDQ. The goal is to visually demonstrate the effectiveness of SVDQuant in maintaining image quality despite aggressive quantization.", "section": "5 Experiments"}, {"figure_path": "https://arxiv.org/html/2411.05007/x16.png", "caption": "Figure 16: Qualitative visual results of SDXL-Turbo on MJHQ.", "description": "This figure displays a qualitative comparison of image generation results from the SDXL-Turbo model (Stable Diffusion XL - Turbo) using different quantization methods on the MJHQ dataset (Midjourney High-Quality dataset). It visually showcases the impact of various 4-bit and 8-bit quantization techniques on the quality of images generated from several prompts. Each row represents a different prompt, and columns show the results for the original FP16 (full precision), the 8-bit quantized versions (MixDQ and SVDQuant), and the 4-bit quantized versions (MixDQ and SVDQuant).  The goal is to demonstrate the visual fidelity maintained by the SVDQuant method, even at the aggressive 4-bit quantization level.", "section": "5.2 RESULTS"}, {"figure_path": "https://arxiv.org/html/2411.05007/x17.png", "caption": "Figure 17: Additional LoRA results on FLUX.1-dev. When applying LoRAs, our INT4 model matches the image quality of the original BF16 model. See Appendix\u00a0C for the detailed used text prompts.", "description": "This figure displays the results of applying five different LoRA (Low-Rank Adaptation) styles to both the original 16-bit FLUX.1-dev model and the INT4 (4-bit integer) quantized version of the model created by SVDQuant.  The LoRA styles are Realism, Ghibsky Illustration, Anime, Children's Sketch, and Yarn Art. The purpose of the figure is to demonstrate that SVDQuant's 4-bit quantization does not negatively impact image quality when using LoRAs.  The visual similarity between the 16-bit and INT4 model outputs across all five LoRA styles supports this conclusion. More detailed text prompts used for image generation are available in Appendix C.", "section": "5 Experiments"}]