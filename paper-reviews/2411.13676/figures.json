[{"figure_path": "https://arxiv.org/html/2411.13676/x3.png", "caption": "Figure 1: (a) Visualize the hybrid-head module in Hymba; (b) Interpret from the memory aspect.", "description": "Figure 1 illustrates the architecture of Hymba's hybrid-head module, which combines transformer attention and state space model (SSM) mechanisms.  Panel (a) shows the internal structure of this module: input tokens are processed in parallel by both attention and SSM heads, generating attention features and SSM features, respectively.  These features are then gated, normalized, and combined to produce the final output. Panel (b) provides an alternative interpretation by focusing on the memory aspects. The attention heads act as a snapshot memory, storing high-resolution details, while the SSM heads act as a fading memory, providing efficient context summarization.  Meta tokens, prepended to the prompts, are also shown and act as a form of learned memory initialization, influencing both heads. This hybrid approach aims to leverage the strengths of both attention (high-resolution recall) and SSMs (efficient processing) for enhanced efficiency and performance.", "section": "2. Hymba: The Proposed Hybrid-Head Architecture"}, {"figure_path": "https://arxiv.org/html/2411.13676/x4.png", "caption": "Figure 2:  Performance comparison of Hymba-1.5B against sub-2B models in terms of average task accuracy, cache size (MB) relative to sequence length, and throughput (tok/sec). Specifically, the tasks include 5-shot MMLU, ARC-C, ARC-E, PIQA, Hellaswag, Winogrande, and SQuAD-C, and the throughput is measured on an NVIDIA A100 with a sequence length of 8k and a batch size of 128 using PyTorch. For models encountering out-of-memory (OOM) issues during throughput measurement, we halve the batch size until the OOM is resolved. This approach is used to measure the maximal achievable throughput without OOM.", "description": "This figure compares the performance of the Hymba-1.5B language model against other publicly available language models with fewer than 2 billion parameters.  The comparison focuses on three key metrics: average accuracy across several benchmark tasks (5-shot MMLU, ARC-C, ARC-E, PIQA, Hellaswag, Winogrande, and SQUAD-C), cache size relative to sequence length, and throughput (tokens per second).  The throughput was measured using an NVIDIA A100 GPU with specific settings (sequence length of 8k, batch size of 128, PyTorch).  To address out-of-memory (OOM) errors during throughput testing, the batch size was halved until the OOM issue was resolved, ensuring the maximum possible throughput is reported.", "section": "2. Hymba: The Proposed Hybrid-Head Architecture"}, {"figure_path": "https://arxiv.org/html/2411.13676/x5.png", "caption": "Figure 3: Visualize the accuracy difference, measured using 1000 samples from Hellaswag\u00a0[21], after removing the Attention or SSM heads in each layer.", "description": "This figure shows the impact of removing either the attention heads or the SSM heads in each layer of the Hymba model on the Hellaswag accuracy.  For each layer, the model was tested with and without attention heads and then with and without SSM heads. The difference in accuracy from the original model is displayed for each layer. This allows for a visualization of the relative importance of each head type across different layers in the model's performance on Hellaswag.", "section": "2.1 A Fused Hybrid-Head Module"}, {"figure_path": "https://arxiv.org/html/2411.13676/extracted/6013569/Figures/meta_token_boxplot.png", "caption": "Figure 4: \n(a) The overall architecture of our Hymba model; (b) The building block of Hymba.", "description": "Figure 4 illustrates the architecture of the Hymba model. Part (a) shows the overall architecture, highlighting the repeated stacking of the building blocks to achieve the desired depth of the network. Part (b) details the structure of a single Hymba building block, which is composed of hybrid modules that process the input in parallel using both attention and state space model (SSM) heads.  The building block design promotes complementary processing of input features, enhancing both efficient context summarization and high-resolution recall.  The overall architecture leverages this design by stacking the efficient modules, leading to improved performance across various tasks.", "section": "2 Hymba: The Proposed Hybrid-Head Architecture"}, {"figure_path": "https://arxiv.org/html/2411.13676/extracted/6013569/Figures/attention-schematics-crop.png", "caption": "Figure 5: Averaged attention scores received by the meta tokens in the last layer of Hymba-1.5B model. Prompts of \u2018Article\u2019, \u2018Math\u2019 and \u2018Code\u2019 are from SQuAD\u00a0[24], GSM8K\u00a0[25], and GitHub-Code\u00a0[26] datasets, respectively.", "description": "This figure displays the average attention scores given to each meta token in the final layer of the Hymba-1.5B model.  The attention scores are averaged across multiple inputs, each starting with a different prompt type from three distinct datasets:  SQuAD (for article prompts), GSM8K (for math prompts), and GitHub-Code (for code prompts). The visualization shows how different prompts elicit varied attention patterns among the meta tokens, suggesting that these tokens learn to represent different aspects of knowledge relevant to the given task.", "section": "2.3 Meta Tokens"}, {"figure_path": "https://arxiv.org/html/2411.13676/x6.png", "caption": "Figure 6: Schematics of the attention map of Hymba as a combination of meta tokens, sliding window attention, and Mamba contributions.", "description": "This figure illustrates the attention mechanism in Hymba, highlighting how meta tokens, sliding window attention, and Mamba (state space model) components interact.  It shows a schematic representation of the attention map, visually demonstrating the contributions of each component to the overall attention process. The different colors or shading likely represent the strength of attention weights, showing how information flows through the model. By visualizing the attention map in this way, the figure helps explain how Hymba combines the strengths of high-resolution attention with efficient context summarization from the state space model, ultimately improving performance.", "section": "2. Hymba: The Proposed Hybrid-Head Architecture"}, {"figure_path": "https://arxiv.org/html/2411.13676/x7.png", "caption": "Figure 7: Sum of attention score from different categories (i.e., \u2018Meta\u2019, \u2018BOS\u2019, \u2018Self\u2019, \u2018Cross\u2019) in Llama-3.2-3B, Jamba and Hymba-1.5B. Parallel SSM and Attention fusion in the latter disentangles attention.", "description": "This figure compares the attention patterns of three different language models: Llama-3.2-3B, Jamba, and Hymba-1.5B.  It breaks down the attention scores into four categories:  'Meta' (attention to the added meta tokens), 'BOS' (attention to the beginning-of-sequence token), 'Self' (attention to the same token), and 'Cross' (attention to other tokens). The visualization helps to illustrate how the models allocate attention differently.  Hymba's parallel architecture of combining attention and state-space model (SSM) heads leads to a more balanced and less concentrated attention distribution, as opposed to Llama's strong focus on the BOS token and Jamba's intermediate approach. The differences highlight Hymba's improved ability to disentangle attention.", "section": "2. Hymba: The Proposed Hybrid-Head Architecture"}, {"figure_path": "https://arxiv.org/html/2411.13676/x8.png", "caption": "Figure 8: Training pipeline adapted for Hymba family. For detailed loss curve of Hymba-Base-1.5B see Fig\u00a014.", "description": "This figure illustrates the training pipeline used to develop the Hymba family of language models.  It highlights the key stages involved in creating both the base and instruct versions of the models. The process starts with general pretraining on a large dataset and proceeds through learning rate annealing, supervised fine-tuning (SFT) in two phases, and direct preference optimization (DPO). This pipeline enables the creation of models that perform well across a range of tasks, as shown by the detailed loss curve for the Hymba-Base-1.5B model in Figure 14. ", "section": "2.5 Hymba Model Family"}, {"figure_path": "https://arxiv.org/html/2411.13676/extracted/6013569/Figures/needle_apple2apple.png", "caption": "Figure 9: Visualize the trade-off between (a) commonsense reasoning accuracy (avr. ARC-C, ARC-E, PIQA, Hellaswag, OBQA, and Winogrande using\u00a0[28]) and cache size, with throughput represented by the point size of different models, and (b) commonsense reasoning accuracy and throughput, with cache size represented by the point size. The throughput is measured with a 8k sequence length and a 128 batch size on an NVIDIA A100 GPU. The cache size is measured with a 8k sequence length, assuming the FP16 format.", "description": "Figure 9 presents a comparison of various language models' performance in commonsense reasoning tasks, illustrating the trade-off between accuracy and resource efficiency.  Subfigure (a) shows the relationship between accuracy and cache size, where the size of the data points represents the throughput of each model. Subfigure (b) displays the relationship between accuracy and throughput, with point size indicating cache size. All measurements were taken using an 8k sequence length and a 128 batch size on an NVIDIA A100 GPU. The cache size is based on FP16 format.", "section": "3. Model Evaluations"}, {"figure_path": "https://arxiv.org/html/2411.13676/x9.png", "caption": "Figure 10: Needle-in-the-haystack performance comparison across different architecture under apple-to-apple setting. The white vertical line represents the finetuning sequence length\n(4k).", "description": "Figure 10 presents a comparison of the performance of different language models on a synthetic 'needle-in-the-haystack' task, where the goal is to locate a specific sentence within a longer document.  The models compared are Hymba, Mamba2, and Llama3, all trained under identical conditions (apple-to-apple). The x-axis represents the length of the input sequence (document), showing how the model performs as the sequence length increases. The vertical white line at 4k tokens indicates the sequence length used during the finetuning phase. The graph likely shows the models' ability to extrapolate to longer sequences beyond what they saw during training. The purpose is to assess the models' ability to maintain performance when faced with a large context, highlighting differences in the recall capabilities and extrapolation performance of the various architectures.", "section": "3.3. Benchmark Different Architectures Under The Same Setting"}, {"figure_path": "https://arxiv.org/html/2411.13676/extracted/6013569/Figures/attn_mamba_gate.png", "caption": "Figure 11: Visualize the ERF and cache size trade-off.", "description": "Figure 11 shows the relationship between effective receptive field (ERF) and cache size for different language model architectures.  ERF is a measure of how far information can effectively propagate within a model. The figure compares models with various designs, including the proposed Hymba model (parallel fusion), a sequential fusion model like Samba, Llama3 (Transformer with global attention), and Mamba (a State Space Model with constant size cache).  The x-axis represents cache size, while the y-axis represents ERF.  It demonstrates the superior performance of the Hymba architecture's parallel fusion approach that achieves a high ERF while maintaining a cache size comparable to the sequential fusion model.  This indicates the parallel design is more efficient in terms of memory usage and information propagation compared to the other architectures.", "section": "2.2. KV Cache Optimization"}, {"figure_path": "https://arxiv.org/html/2411.13676/x10.png", "caption": "Figure 12: Left: visualization of output magnitudes of attention and SSM heads. SSM heads consistently have higher output magnitude than attention heads due to their structure. Right: visualization of attention and SSM heads\u2019 gate magnitudes. Through model learning, the relative magnitudes of attention and SSM gates vary across different layers.", "description": "Figure 12 presents a comparative analysis of the output magnitudes and gate magnitudes for both attention heads and SSM heads across different layers of the Hymba model.  The left panel shows that SSM heads consistently exhibit larger output magnitudes compared to attention heads, a characteristic attributed to their inherent structural differences. The right panel demonstrates how the relative magnitudes of the gates for both attention and SSM heads dynamically change across various layers during the model's learning process. This visualization highlights the interplay and complementary roles of attention and SSM mechanisms within the Hymba architecture.", "section": "2.1 A Fused Hybrid-Head Module"}, {"figure_path": "https://arxiv.org/html/2411.13676/extracted/6013569/Figures/lmloss_lr.png", "caption": "Figure 13: Visualize the task performance difference across three tasks after removing the Attention or SSM heads in each layer. The task performance is measured using 1000 samples from each task. Note that removing critical modules in specific layers causes a significant gap compared to others, making their bars fall outside the box. For such layers, we annotate the task performance with text.", "description": "This figure displays ablation study results showing the impact of removing either attention heads or SSM heads on three different tasks.  The x-axis represents the layer number.  The y-axis represents the performance change (difference) relative to a baseline model with all heads intact. Each bar represents a layer, with the height indicating the performance change when that layer's attention or SSM head is removed.  Note that some performance drops are so significant that the bars extend beyond the chart's limits; these are annotated with text directly on the chart.", "section": "2.1 A Fused Hybrid-Head Module"}, {"figure_path": "https://arxiv.org/html/2411.13676/x11.png", "caption": "Figure 14: Training curves of Hymba-1.5B.", "description": "This figure shows the training curves for the Hymba-1.5B model.  It displays the validation loss and learning rate over the course of the training process. The training process is divided into two phases, each with a different context length (2K tokens and 8K tokens). The plot shows how the validation loss changes over the training epochs, indicating the model's performance during training, and how the learning rate is adjusted during these phases.", "section": "2.5 Hymba Model Family"}]