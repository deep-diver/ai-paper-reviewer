[{"figure_path": "https://arxiv.org/html/2412.06782/x1.png", "caption": "Figure 1: \nPolicy Comparison.\nThe representative performance among Behavior Transformer\u00a0[52] served as an autoregressive policy, Diffusion Policy\u00a0[11], and our approach in the state-based Robomimic square task experiment. CARP achieves a superior balance of performance and efficiency.", "description": "This figure compares the performance and efficiency of three different visuomotor policy learning methods on a state-based square task from the Robomimic benchmark.  The methods compared are: Behavior Transformer (an autoregressive method), Diffusion Policy (a diffusion-based method), and CARP (the authors' proposed method). The graph shows that CARP achieves a superior balance of high performance and high efficiency compared to the other two approaches.", "section": "1 Introduction"}, {"figure_path": "https://arxiv.org/html/2412.06782/x2.png", "caption": "(a) Autoregressive Policy", "description": "This figure illustrates the structure of an autoregressive policy.  In this type of policy, the next action is predicted based solely on previous actions (a1, a2, a3, a4...) and the current state (s0, s1, s2...). The prediction process unfolds sequentially, step-by-step.", "section": "2. Background"}, {"figure_path": "https://arxiv.org/html/2412.06782/x3.png", "caption": "(b) Diffusion Policy", "description": "This figure illustrates the structure of a diffusion-based policy for visuomotor control. It depicts how an action sequence is modeled as a series of denoising steps, starting from random noise and progressively refining towards a noise-free action sequence. Each step involves a conditional probability model (e.g., a neural network) that transforms the noisy action sequence based on the current observation and the action history. This iterative refinement process allows the policy to capture the complexity and uncertainty inherent in robot actions, but can also lead to computational inefficiencies due to multiple denoising steps.", "section": "2. Background"}, {"figure_path": "https://arxiv.org/html/2412.06782/x4.png", "caption": "(c) CARP (Ours)", "description": "This figure shows the architecture of CARP (Coarse-to-Fine Autoregressive Policy), a novel visuomotor policy learning framework.  Unlike traditional autoregressive methods that predict actions sequentially, one step at a time, CARP introduces a coarse-to-fine approach.  The action sequence is first encoded into multiple token maps at different scales (coarse to fine), capturing the global structure and temporal coherence of the entire sequence. A transformer then refines the sequence predictions in a coarse-to-fine autoregressive process using these multi-scale representations.  This design allows CARP to maintain efficiency while capturing long-range dependencies and generating highly accurate and smooth actions.", "section": "3. Method"}, {"figure_path": "https://arxiv.org/html/2412.06782/x5.png", "caption": "Figure 2: \nStructure of Current Policies.\n\ud835\udc82^^\ud835\udc82\\hat{\\boldsymbol{a}}over^ start_ARG bold_italic_a end_ARG is the predicted action, \ud835\udc82ksuperscript\ud835\udc82\ud835\udc58\\boldsymbol{a}^{k}bold_italic_a start_POSTSUPERSCRIPT italic_k end_POSTSUPERSCRIPT denotes the refining action at step k\ud835\udc58kitalic_k, \ud835\udc94\ud835\udc94\\boldsymbol{s}bold_italic_s is the historical condition.\na) Autoregressive Policy predicts the action step-by-step in the next-token paradigm.\nb) Diffusion Policy models the noise process used to refine the action sequence.\nc) CARP refines action sequence predictions autoregressively from coarse to fine granularity.", "description": "Figure 2 illustrates the differences in action prediction mechanisms between traditional autoregressive policies, diffusion-based models, and the proposed CARP model. (a) Autoregressive Policies predict actions sequentially, one at a time, based on the current prediction and the history. (b) Diffusion Policies generate an action sequence by iteratively refining a noisy prediction through a denoising process. (c) CARP improves efficiency and accuracy by using a coarse-to-fine approach. It first generates a coarse prediction of the entire sequence, then refines this prediction step by step in a next-scale fashion, gradually increasing the granularity.", "section": "2. Background"}, {"figure_path": "https://arxiv.org/html/2412.06782/x6.png", "caption": "(a) Multi-Scale Action Tokenization", "description": "This figure shows the process of multi-scale action tokenization in CARP.  An action autoencoder takes a sequence of actions as input and generates multiple token maps at different scales (r1, r2...rk). Each token map represents the action sequence at a particular scale, capturing the action sequence's global structure and maintaining its temporal locality. The autoencoder consists of an encoder, a quantizer, and a decoder, enabling a hierarchical encoding and decoding of action sequences.", "section": "3. Method"}, {"figure_path": "https://arxiv.org/html/2412.06782/x7.png", "caption": "(b) Coarse-to-Fine Autoregressive Prediction", "description": "This figure shows the second stage of the CARP (Coarse-to-Fine Autoregressive Policy) model.  It illustrates how the autoregressive prediction process is structured as a coarse-to-fine, next-scale approach. The model progressively refines action predictions from a coarse representation (r1) to a finer representation (rk), with each step attending only to the preceding steps. The final token map (rk) is then decoded into continuous actions for execution.  A cross-entropy loss is used during training.", "section": "3. Method"}, {"figure_path": "https://arxiv.org/html/2412.06782/x8.png", "caption": "Figure 3: Overview of the Two Stages of CARP.\na) A multi-scale action autoencoder extracts token maps \ud835\udc931,\ud835\udc932,\u2026,\ud835\udc93Ksubscript\ud835\udc931subscript\ud835\udc932\u2026subscript\ud835\udc93\ud835\udc3e\\boldsymbol{r}_{1},\\boldsymbol{r}_{2},\\dots,\\boldsymbol{r}_{K}bold_italic_r start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT , bold_italic_r start_POSTSUBSCRIPT 2 end_POSTSUBSCRIPT , \u2026 , bold_italic_r start_POSTSUBSCRIPT italic_K end_POSTSUBSCRIPT to represent the action sequence at different scales, trained using the standard VQVAE loss.\nb) The autoregressive prediction is reformulated as a coarse-to-fine, next-scale paradigm.\nThe sequence is progressively refined from coarse token map \ud835\udc931subscript\ud835\udc931\\boldsymbol{r}_{1}bold_italic_r start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT to finer granularity token map \ud835\udc93Ksubscript\ud835\udc93\ud835\udc3e\\boldsymbol{r}_{K}bold_italic_r start_POSTSUBSCRIPT italic_K end_POSTSUBSCRIPT, where each \ud835\udc93ksubscript\ud835\udc93\ud835\udc58\\boldsymbol{r}_{k}bold_italic_r start_POSTSUBSCRIPT italic_k end_POSTSUBSCRIPT contains lksubscript\ud835\udc59\ud835\udc58l_{k}italic_l start_POSTSUBSCRIPT italic_k end_POSTSUBSCRIPT tokens.\nAn attention mask ensures that each \ud835\udc93ksubscript\ud835\udc93\ud835\udc58\\boldsymbol{r}_{k}bold_italic_r start_POSTSUBSCRIPT italic_k end_POSTSUBSCRIPT attends only to the preceding \ud835\udc931:k\u22121subscript\ud835\udc93:1\ud835\udc581\\boldsymbol{r}_{1:k-1}bold_italic_r start_POSTSUBSCRIPT 1 : italic_k - 1 end_POSTSUBSCRIPT during training.\nA standard Cross-Entropy loss is used for training. During inference, the final token map \ud835\udc93Ksubscript\ud835\udc93\ud835\udc3e\\boldsymbol{r}_{K}bold_italic_r start_POSTSUBSCRIPT italic_K end_POSTSUBSCRIPT is decoded into continuous actions for execution.", "description": "Figure 3 illustrates the two-stage process of CARP (Coarse-to-Fine Autoregressive Policy).  Stage (a) shows a multi-scale action autoencoder.  This autoencoder takes an action sequence as input and produces multiple token maps (r1, r2... rK), each representing the sequence at a different level of detail.  These maps are generated using a Vector Quantized Variational Autoencoder (VQVAE) which minimizes the reconstruction error.  Stage (b) shows the autoregressive prediction process.  Starting from the coarsest token map (r1), the model progressively refines the action sequence through finer-grained token maps (r2, r3... rK). An attention mechanism ensures that each token map considers only the previous maps during training. The training uses a cross-entropy loss function.  During inference, only the final, most detailed token map (rK) is decoded to generate a continuous action sequence.", "section": "3. Method"}, {"figure_path": "https://arxiv.org/html/2412.06782/x9.png", "caption": "Figure 4: \nSingle-Task Simulation Setup.\nWe evaluate three tasks from the Robomimic\u00a0[38] benchmark\u2014Lift, Can, and Square\u2014ordered by increasing difficulty, along with a Kitchen task\u00a0[17] on the far left.", "description": "Figure 4 shows the experimental setup for single-task simulations used in the paper.  Four tasks are shown:  'Lift', 'Can', and 'Square' from the Robomimic benchmark, ordered from easiest to hardest, and a 'Kitchen' task from a separate benchmark. These tasks are used to evaluate the performance of different robotic control policies in a controlled simulated environment.", "section": "4.1 Evaluation on Simulation Benchmark"}, {"figure_path": "https://arxiv.org/html/2412.06782/x10.png", "caption": "Figure 5: \nVisualization of the Trajectory and Refining Process.\nThe left panel shows the final predicted trajectories for each task, with CARP producing smoother and more consistent paths than Diffusion Policy (DP).\nThe right panel visualizes intermediate trajectories during the refinement process for CARP (top-right) and DP (bottom-right).\nDP displays considerable redundancy, resulting in slower processing and unstable training, as illustrated by 6 selected steps among 100 denoising steps.\nIn contrast, CARP achieves efficient trajectory refinement across all 4 scales, with each step contributing meaningful updates.", "description": "This figure compares the trajectory generation process of CARP and Diffusion Policy (DP). The left side displays the final trajectories for the 'Can' and 'Square' tasks, showing CARP's smoother and more consistent paths compared to DP's less refined results. The right side visualizes the intermediate steps during trajectory refinement for both methods.  It highlights the redundancy of DP's 100-step denoising process (6 steps are shown), leading to slower processing and unstable training, while CARP efficiently refines the trajectory across 4 scales, with each step providing significant improvements.", "section": "4.1 Evaluation on Simulation Benchmark"}, {"figure_path": "https://arxiv.org/html/2412.06782/x11.png", "caption": "Figure 6: \nMulti-Task Simulation Setup.\nWe evaluate eight tasks from the MimicGen\u00a0[39] benchmark: Coffee, Hammer Cleanup, Mug Cleanup, Nut Assembly, Square, Stack, Stack Three, and Threading, listed left-to-right and top-to-bottom.", "description": "This figure showcases the eight multi-task simulation scenarios used to evaluate the CARP model. The tasks, sourced from the MimicGen benchmark, are displayed in a 2x4 grid, arranged from left to right and top to bottom.  Each task presents a unique robotic manipulation challenge: Coffee, Hammer Cleanup, Mug Cleanup, Nut Assembly, Square (block arrangement), Stack (block stacking), Stack Three (stacking three blocks), and Threading (threading a needle).  The visual representation offers a clear overview of the diverse manipulation skills tested within this experiment.", "section": "4.2. Evaluation on Multi-Task Benchmark"}, {"figure_path": "https://arxiv.org/html/2412.06782/x12.png", "caption": "Figure 7: Real-World Setup.\nThe left panel shows the environment used for the experiment and demonstration collection. The right panel shows the trajectory from the Cup and Bowl datasets.", "description": "This figure shows the setup for real-world robotic manipulation experiments and example trajectories. The left panel depicts the experimental environment, including a UR5e robotic arm, a Robotiq-2f-85 gripper, and two RGB cameras (one wrist-mounted and one in a third-person view).  The right panel displays example trajectories for two tasks: (top) picking up a cup from a table and placing it down, and (bottom) picking up a smaller bowl and placing it inside a larger bowl.  These trajectories illustrate the robot's successful execution of these tasks.", "section": "4.3 Evaluation on Real-World"}, {"figure_path": "https://arxiv.org/html/2412.06782/x13.png", "caption": "Figure 8: \nReal-World Results (Visual Policy).\nWe report the average success rate across 20 trials and the inference speed as action prediction frequency.\nCARP achieves competitive success rates with significantly faster inference compared to DP.", "description": "Figure 8 presents a bar chart summarizing the performance of CARP and Diffusion Policy (DP) on two real-world robotic manipulation tasks: Cup and Bowl.  The chart displays both the average success rate (across 20 trials) and the inference speed (measured as action prediction frequency in Hertz) for each method on each task.  The results show that CARP achieves comparable success rates to DP but with a significant improvement in inference speed, demonstrating its efficiency.", "section": "4.3. Evaluation on Real-World"}, {"figure_path": "https://arxiv.org/html/2412.06782/x14.png", "caption": "Figure 9: \nVisualization of CAPR on Real-World Tasks.\nCARP generates smooth and successful trajectories for the Cup and Bowl tasks, with temporal progression from left to right.", "description": "Figure 9 shows the results of applying the CARP model to two real-world robotic manipulation tasks: Cup and Bowl.  For each task, a sequence of images demonstrates the robot's actions, progressing from left to right to show the smooth and successful trajectory generated by the CARP algorithm.  The images illustrate how CARP effectively plans and executes the manipulation tasks.", "section": "4.3. Evaluation on Real-World"}, {"figure_path": "https://arxiv.org/html/2412.06782/x15.png", "caption": "Figure 10: \nCoarse-to-Fine Autoregressive Inference.\nDuring inference, we leverage kv-caching to enable coarse-to-fine prediction without the need for causal masks.\nThe finest-scale token map \ud835\udc93Ksubscript\ud835\udc93\ud835\udc3e\\boldsymbol{r}_{K}bold_italic_r start_POSTSUBSCRIPT italic_K end_POSTSUBSCRIPT is subsequently decoded by the action VQVAE decoder into executable actions for the robotic arm.", "description": "During inference, CARP uses a coarse-to-fine prediction approach.  It starts with a coarse representation of the action sequence (\ud835\udc5f\u2081, \ud835\udc5f\u2082, etc.) and progressively refines it to the finest level (\ud835\udc5f\u2096). This process leverages kv-caching to efficiently generate predictions, eliminating the need for causal masking. The final, most detailed representation (\ud835\udc5f\u2096) is then decoded by the action VQVAE to produce the actual control commands for the robot arm.", "section": "3. Method"}, {"figure_path": "https://arxiv.org/html/2412.06782/x16.png", "caption": "Figure 11: \nConventional Autoregressive Policy.\nIn reinforcement learning, conventional autoregressive policies generate action tokens sequentially, where each token is predicted based on the previously generated tokens. This differs from the action chunking prediction shown in\u00a0Fig.\u00a02(a).", "description": "Figure 11 illustrates the conventional approach of autoregressive policies in reinforcement learning.  Unlike the action chunking method shown in Figure 2(a), this approach generates action tokens sequentially, meaning that each token's prediction is solely dependent on the tokens generated before it in the sequence. This sequential, step-by-step process contrasts with methods that can predict multiple tokens or even the entire action sequence at once.", "section": "2. Background"}, {"figure_path": "https://arxiv.org/html/2412.06782/x17.png", "caption": "Figure 12: \nVisualization of Tasks in Single-Task Experiment.", "description": "Figure 12 shows a visualization of the three single-task experiments from the Robomimic benchmark: Lift, Can, and Square, along with the Kitchen task. Each row represents one task and shows a sequence of images capturing the robot's actions throughout the task execution.", "section": "4.1 Evaluation on Simulation Benchmark"}, {"figure_path": "https://arxiv.org/html/2412.06782/x18.png", "caption": "Figure 13: \nVisualization of Tasks in Multi-Task Experiment.", "description": "Figure 13 shows a visualization of the eight multi-task experiments from the MimicGen benchmark. Each row displays a sequence of images showing the robot performing the steps required for a given task.  The tasks include Coffee, Hammer Cleanup, Mug Cleanup, Nut Assembly, Square, Stack, Stack Three, and Threading.  The images illustrate the actions performed by the robot arm during the execution of each task, providing a visual representation of the robot's performance.", "section": "4.2. Evaluation on Multi-Task Benchmark"}]