[{"content": "| Schedule | Steps | FID (\u2193) | sFID (\u2193) | IS (\u2191) | TMACs | Latency (s) |\n|---|---|---|---|---|---|---|\n| L2C | 50 | 2.27 \u00b1 0.04 | 4.23 \u00b1 0.02 | 245.8 \u00b1 0.7 | 278.71 | 6.85 |\n| No Cache | 50 | 2.28 \u00b1 0.03 | 4.30 \u00b1 0.02 | 241.6 \u00b1 1.1 | 365.59 | 8.34 |\n| Ours (\u03b1 = 0.08) | 50 | **2.28 \u00b1 0.03** | **4.29 \u00b1 0.02** | **241.8 \u00b1 0.9** | **336.37** | **7.62** |\n| FORA (n=2) | 50 | 2.65 \u00b1 0.04 | 4.69 \u00b1 0.03 | 238.5 \u00b1 1.1 | 190.25 | 5.17 |\n| Ours (\u03b1 = 0.18) | 50 | **2.65 \u00b1 0.04** | **4.65 \u00b1 0.03** | **238.7 \u00b1 1.1** | **175.65** | **4.85** |\n| FORA (n=3) | 50 | 3.31 \u00b1 0.05 | 5.71 \u00b1 0.06 | 230.1 \u00b1 1.3 | 131.81 | 4.12 |\n| Ours (\u03b1 = 0.22) | 50 | **3.14 \u00b1 0.05** | **5.19 \u00b1 0.04** | **231.7 \u00b1 1.0** | **131.81** | **4.11** |\n| No Cache | 30 | 2.66 \u00b1 0.04 | 4.42 \u00b1 0.03 | 234.6 \u00b1 1.0 | 219.36 | 4.88 |\n| FORA (n=2) | 30 | 3.79 \u00b1 0.04 | 5.72 \u00b1 0.05 | 222.2 \u00b1 1.2 | 117.08 | 3.13 |\n| Ours (\u03b1 = 0.35) | 30 | **3.72 \u00b1 0.04** | **5.51 \u00b1 0.05** | **222.9 \u00b1 1.0** | **117.08** | **3.13** |\n| No Cache | 70 | 2.17 \u00b1 0.02 | 4.33 \u00b1 0.02 | 242.3 \u00b1 1.6 | 511.83 | 11.47 |\n| FORA (n=2) | 70 | 2.36 \u00b1 0.02 | 4.46 \u00b1 0.03 | 242.2 \u00b1 1.3 | 263.43 | 7.15 |\n| Ours (\u03b1 = 0.08) | 70 | **2.37 \u00b1 0.02** | **4.29 \u00b1 0.03** | **242.6 \u00b1 1.5** | **248.8** | **6.9** |\n| FORA (n=3) | 70 | 2.80 \u00b1 0.02 | 5.38 \u00b1 0.04 | 238.0 \u00b1 1.2 | 175.77 | 5.61 |\n| Ours (\u03b1 = 0.12) | 70 | **2.68 \u00b1 0.02** | **4.90 \u00b1 0.04** | **238.8 \u00b1 1.3** | **175.77** | **5.62** |", "caption": "Table 1: Results For DiT-XL-256x256 on using DDIM Sampling, sorted by TMACs. Note that L2C is not training free.", "description": "This table presents the results of different methods for accelerating DiT-XL-256x256 image generation using the DDIM sampling technique.  It compares the performance of several approaches, including SmoothCache with different hyperparameter settings (\u03b1), FORA with varying numbers of cached layers (n), and a baseline with no caching (No Cache). The table is sorted by the total number of Multiply-Accumulate operations (TMACs), indicating computational cost. Key metrics presented include Inception Score (IS), Fr\u00e9chet Inception Distance (FID), and Structural Similarity Index (SSIM), all of which assess the quality of the generated images. Latency (in seconds) is also reported, reflecting the inference time.  The table highlights that SmoothCache achieves a favorable trade-off between speed and quality, often outperforming other methods with similar or faster inference times. Notably, it emphasizes that L2C (Learning-to-Cache), one of the compared methods, is not training-free unlike SmoothCache.", "section": "3. Experiments"}, {"content": "| Schedule | Steps | VBench (%) (<math alttext=\"\\uparrow\" class=\"ltx_Math\" display=\"inline\" id=\"S3.T2.1.1.1.m1.1\"><semantics id=\"S3.T2.1.1.1.m1.1a\"><mo id=\"S3.T2.1.1.1.m1.1.1\" stretchy=\"false\" xref=\"S3.T2.1.1.1.m1.1.1.cmml\">\u2191</mo><annotation-xml encoding=\"MathML-Content\" id=\"S3.T2.1.1.1.m1.1b\"><ci id=\"S3.T2.1.1.1.m1.1.1.cmml\" xref=\"S3.T2.1.1.1.m1.1.1\">\u2191</ci></annotation-xml><annotation encoding=\"application/x-tex\" id=\"S3.T2.1.1.1.m1.1c\">\\uparrow</annotation><annotation encoding=\"application/x-llamapun\" id=\"S3.T2.1.1.1.m1.1d\">\u2191</annotation></semantics></math>) | TMACs | Latency (s) |\n|---|---|---|---|---|\n| No Cache | 30 | 79.36 <math alttext=\"\\pm\" class=\"ltx_Math\" display=\"inline\" id=\"S3.T2.3.3.2.m2.1\"><semantics id=\"S3.T2.3.3.2.m2.1a\"><mo id=\"S3.T2.3.3.2.m2.1.1\" xref=\"S3.T2.3.3.2.m2.1.1.cmml\">\\pm</mo><annotation-xml encoding=\"MathML-Content\" id=\"S3.T2.3.3.2.m2.1b\"><csymbol cd=\"latexml\" id=\"S3.T2.3.3.2.m2.1.1.cmml\" xref=\"S3.T2.3.3.2.m2.1.1\">plus-or-minus</csymbol></annotation-xml><annotation encoding=\"application/x-tex\" id=\"S3.T2.3.3.2.m2.1c\">\\pm</annotation><annotation encoding=\"application/x-llamapun\" id=\"S3.T2.3.3.2.m2.1d\">\\pm</annotation></semantics></math>0.19 | 1612.1 | 28.43 |\n| Ours (<math alttext=\"\\alpha\" class=\"ltx_Math\" display=\"inline\" id=\"S3.T2.5.5.1.m1.1\"><semantics id=\"S3.T2.5.5.1.m1.1a\"><mi id=\"S3.T2.5.5.1.m1.1.1\" xref=\"S3.T2.5.5.1.m1.1.1.cmml\">\\alpha</mi><annotation-xml encoding=\"MathML-Content\" id=\"S3.T2.5.5.1.m1.1b\"><ci id=\"S3.T2.5.5.1.m1.1.1.cmml\" xref=\"S3.T2.5.5.1.m1.1.1\">\\alpha</ci></annotation-xml><annotation encoding=\"application/x-tex\" id=\"S3.T2.5.5.1.m1.1c\">\\alpha</annotation><annotation encoding=\"application/x-llamapun\" id=\"S3.T2.5.5.1.m1.1d\">italic_\\alpha</annotation></semantics></math> = 0.02) | 30 | 78.76 <math alttext=\"\\pm\" class=\"ltx_Math\" display=\"inline\" id=\"S3.T2.7.7.3.m2.1\"><semantics id=\"S3.T2.7.7.3.m2.1a\"><mo id=\"S3.T2.7.7.3.m2.1.1\" xref=\"S3.T2.7.7.3.m2.1.1.cmml\">\\pm</mo><annotation-xml encoding=\"MathML-Content\" id=\"S3.T2.7.7.3.m2.1b\"><csymbol cd=\"latexml\" id=\"S3.T2.7.7.3.m2.1.1.cmml\" xref=\"S3.T2.7.7.3.m2.1.1\">plus-or-minus</csymbol></annotation-xml><annotation encoding=\"application/x-tex\" id=\"S3.T2.7.7.3.m2.1c\">\\pm</annotation><annotation encoding=\"application/x-llamapun\" id=\"S3.T2.7.7.3.m2.1d\">\\pm</annotation></semantics></math>0.38 | 1388.5 | 26.57 |\n| Ours (<math alttext=\"\\alpha\" class=\"ltx_Math\" display=\"inline\" id=\"S3.T2.9.9.1.m1.1\"><semantics id=\"S3.T2.9.9.1.m1.1a\"><mi id=\"S3.T2.9.9.1.m1.1.1\" xref=\"S3.T2.9.9.1.m1.1.1.cmml\">\\alpha</mi><annotation-xml encoding=\"MathML-Content\" id=\"S3.T2.9.9.1.m1.1b\"><ci id=\"S3.T2.9.9.1.m1.1.1.cmml\" xref=\"S3.T2.9.9.1.m1.1.1\">\\alpha</ci></annotation-xml><annotation encoding=\"application/x-tex\" id=\"S3.T2.9.9.1.m1.1c\">\\alpha</annotation><annotation encoding=\"application/x-llamapun\" id=\"S3.T2.9.9.1.m1.1d\">italic_\\alpha</annotation></semantics></math> = 0.03) | 30 | 78.10 <math alttext=\"\\pm\" class=\"ltx_Math\" display=\"inline\" id=\"S3.T2.11.11.3.m2.1\"><semantics id=\"S3.T2.11.11.3.m2.1a\"><mo id=\"S3.T2.11.11.3.m2.1.1\" xref=\"S3.T2.11.11.3.m2.1.1.cmml\">\\pm</mo><annotation-xml encoding=\"MathML-Content\" id=\"S3.T2.11.11.3.m2.1b\"><csymbol cd=\"latexml\" id=\"S3.T2.11.11.3.m2.1.1.cmml\" xref=\"S3.T2.11.11.3.m2.1.1\">plus-or-minus</csymbol></annotation-xml><annotation encoding=\"application/x-tex\" id=\"S3.T2.11.11.3.m2.1c\">\\pm</annotation><annotation encoding=\"application/x-llamapun\" id=\"S3.T2.11.11.3.m2.1d\">\\pm</annotation></semantics></math>0.51 | 1321.1 | 26.17 |", "caption": "Table 2: Results For OpenSora on Rectified Flow.", "description": "This table presents the results of applying SmoothCache and other methods (No Cache, FORA with 2 and 3 steps caching) to the OpenSora model using the Rectified Flow solver.  It shows the VBench score (a metric for video generation quality), the total number of multiply-accumulate operations (TMACS), the inference latency in seconds, and the number of sampling steps used for each method.  The data illustrates the trade-off between speed and quality achieved by each method, showing how SmoothCache improves the model's performance.", "section": "3. Experiments"}, {"content": "| Schedule | AudioCaps |  |  | MusicCaps (No Singing) |  |  | Song Describer (No Singing) |  |  | TMACs | Latency (s) |\n|---|---|---|---|---|---|---|---|---|---|---|---| \n|  | FD<sub>OpenL3</sub> (\u2193) | KL<sub>PaSST</sub> (\u2193) | CLAP (\u2191) | FD<sub>OpenL3</sub> (\u2193) | KL<sub>PaSST</sub> (\u2193) | CLAP (\u2191) | FD<sub>OpenL3</sub> (\u2193) | KL<sub>PaSST</sub> (\u2193) | CLAP (\u2191) |  |  |\n| No Cache | 81.7 \u00b1 6.8 | 2.13 \u00b1 0.02 | 0.287 \u00b1 0.003 | 82.7 \u00b1 2.1 | 0.931 \u00b1 0.012 | 0.467 \u00b1 0.001 | 105.2 \u00b1 6.3 | 0.551 \u00b1 0.024 | 0.421 \u00b1 0.003 | 209.82 | 5.65 |\n| Ours (\u03b1 = 0.15) | 84.5 \u00b1 6.7 | 2.15 \u00b1 0.02 | 0.285 \u00b1 0.003 | 85.9 \u00b1 2.3 | 0.942 \u00b1 0.012 | 0.467 \u00b1 0.001 | 106.2 \u00b1 6.6 | 0.555 \u00b1 0.024 | 0.420 \u00b1 0.003 | 170.75 | 4.59 |\n| Ours (\u03b1 = 0.30) | 89.6 \u00b1 6.3 | 2.17 \u00b1 0.02 | 0.271 \u00b1 0.003 | 82.0 \u00b1 1.5 | 0.962 \u00b1 0.012 | 0.448 \u00b1 0.001 | 131.3 \u00b1 5.9 | 0.596 \u00b1 0.028 | 0.392 \u00b1 0.003 | 136.16 | 3.72 |", "caption": "Table 3: Results For Stable Audio Open on DPMSolver++(3M) SDE on 3 datasets.", "description": "This table presents the results of the SmoothCache method applied to the Stable Audio Open model, using the DPM-Solver++(3M) stochastic differential equation (SDE) solver across three datasets: AudioCaps, MusicCaps (without singing prompts), and Song Describer (without singing prompts).  For each dataset, the table shows the performance metrics (FDOpenL3, KL-PASST, CLAP,  Total Multiply-Accumulate Operations (TMACS), and inference Latency in seconds) for three scenarios: no caching, static caching (with N=2), and SmoothCache with two different threshold values (\u03b1 = 0.15 and \u03b1 = 0.30). This allows for a comparison of SmoothCache's performance against a baseline (no caching) and a simpler caching approach (static caching), demonstrating its effectiveness in accelerating inference while maintaining or improving generation quality.", "section": "3.2 Results"}]