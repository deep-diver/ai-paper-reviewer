[{"figure_path": "https://arxiv.org/html/2412.21015/x1.png", "caption": "Figure 1: Overview of the annotation and visualization process of MapQaTor\u00a0.", "description": "This figure illustrates the workflow of the MapQaTor platform, starting from selecting a map API to exporting the annotated dataset. Users choose a map API, submit queries through provided tools, visualize the fetched data on an embedded map, and then create and annotate question-answer pairs based on the visualized data and API calls. The platform utilizes a plug-and-play architecture for seamless API integration, incorporates a caching mechanism for consistent ground truth, and offers visualization tools to enhance the annotation process.", "section": "2 MAPQATOR"}, {"figure_path": "https://arxiv.org/html/2412.21015/extracted/6071208/figures/demo_snapshots/TextSearch.png", "caption": "Figure 2: Search for a place", "description": "The figure displays the interface for searching a place using MAPQATOR.  A search bar is prominent, allowing users to input place names or addresses.  Below the search bar, previously saved places are listed for quick selection. The user can search either through the map view or list view. Once a location is selected, relevant details are displayed, supporting efficient data collection and annotation for creating map-based question-answering datasets.", "section": "2.4 Data Collection Tools"}, {"figure_path": "https://arxiv.org/html/2412.21015/extracted/6071208/figures/demo_snapshots/PlaceDetails.png", "caption": "Figure 3: Fetch full details of a place", "description": "This figure displays the functionality of the Place Details tool in MAPQATOR.  It shows how users can obtain detailed information about a specific location by selecting it from a dropdown menu. The displayed information includes the location's address, opening hours, accessibility features, and reviews.  This detailed information is crucial for creating accurate and context-rich question-answer pairs for evaluating large language models (LLMs) in geospatial reasoning tasks.", "section": "2.4 Data Collection Tools"}, {"figure_path": "https://arxiv.org/html/2412.21015/extracted/6071208/figures/demo_snapshots/NearbySearchForm.png", "caption": "Figure 4: Search Nearby Places", "description": "This figure shows the interface for the \"Nearby Search\" tool in MAPQATOR.  Users select a location from a dropdown menu or by adding a new location. Then they choose a type of point of interest (POI), such as restaurants, shops, or landmarks.  Options to filter results by minimum rating, price range, and to sort by relevance or distance are also shown.  The map displays the chosen location and the nearby POIs found by the system, allowing users to review the results visually before using them to create question-answer pairs for their geospatial datasets.", "section": "2.4 Data Collection Tools"}, {"figure_path": "https://arxiv.org/html/2412.21015/extracted/6071208/figures/demo_snapshots/ComputeRoutesForm.png", "caption": "Figure 5: Find routes between places", "description": "This figure shows the interface for the Compute Routes tool in MAPQATOR.  Users can input an origin and destination, select a travel mode (driving, walking, cycling, etc.), and optionally add intermediate stops or specify constraints like avoiding tolls or highways. The system then computes routes between the specified locations and displays them on an embedded map.  The visualization includes the route path, travel time, and distance for each route.  Users can also select options to compute alternative routes and optimize the order of intermediate stops for the most efficient route. ", "section": "2.4 Compute Routes"}, {"figure_path": "https://arxiv.org/html/2412.21015/extracted/6071208/figures/demo_snapshots/SearchAlongRouteForm.png", "caption": "Figure 6: Search places along a route", "description": "This figure demonstrates the \"Search Along Route\" tool in MAPQATOR.  Users define an origin and destination, specify travel mode (e.g., driving), and optionally add filters like POI type, minimum rating, and price range.  The map displays the route, and markers indicate points of interest along that route that match the specified criteria.  The tool allows efficient discovery of relevant locations situated along a chosen route, enriching the dataset with contextually relevant information.", "section": "2.4 Data Collection Tools"}, {"figure_path": "https://arxiv.org/html/2412.21015/extracted/6071208/figures/demo_snapshots/QAForm.png", "caption": "Figure 7: Create a question, provide options, and annotate the correct answer.", "description": "This figure shows the interface for creating and annotating questions within the MAPQATOR platform.  Users input a question, define the answer type (e.g., open-ended, yes/no, multiple choice, single choice), provide options if necessary, and then specify the correct answer. This process is crucial for building a high-quality, well-structured dataset for evaluating large language models (LLMs) on geospatial reasoning tasks.", "section": "2.5 Question Design and Annotation"}, {"figure_path": "https://arxiv.org/html/2412.21015/extracted/6071208/figures/markers.png", "caption": "Figure 8: Implementing the TomTom API Adapter for Text Search in MapQaTor", "description": "This figure shows how to implement the TomTom API adapter for the Text Search tool within the MapQaTor platform. It demonstrates extending the TextSearch base class to include a TomTom-specific implementation using the methods 'convertRequest' and 'convertResponse'. This ensures consistent interaction between different APIs and maintain standardized request and response formats across the platform. The example highlights the use of environment variables for security, preventing exposure of API keys on the frontend.", "section": "2.1 Plug-and-Play Architecture"}, {"figure_path": "https://arxiv.org/html/2412.21015/extracted/6071208/figures/routes.png", "caption": "Figure 9: Polyline Decoding Algorithm", "description": "This algorithm decodes a polyline string, a common format for encoding a series of geographical coordinates, into an array of latitude and longitude pairs. It iterates through the encoded string, interpreting each character to extract the changes in latitude and longitude. These changes are then cumulatively added to the initial values to obtain the final coordinates. The algorithm efficiently handles the variable-length encoding scheme of polylines, making it suitable for processing geographical data efficiently.", "section": "Visualization Tools"}, {"figure_path": "https://arxiv.org/html/2412.21015/extracted/6071208/figures/summarized_context.png", "caption": "Figure 10: Set of markers indicating different places", "description": "This figure displays a map view with multiple markers, each representing a different place or point of interest.  The markers are color-coded or visually distinct to aid in differentiating them. This visualization likely demonstrates the capability of the MAPQATOR system to accurately display and locate points of interest on an interactive map using data gathered from various map APIs.", "section": "2.3 Visualization Tools"}, {"figure_path": "https://arxiv.org/html/2412.21015/extracted/6071208/figures/visual_context.png", "caption": "Figure 11: Visualizing routes between places", "description": "This figure displays the visualization of routes between places using MAPQATOR.  It shows how the platform allows users to visualize computed routes on an embedded map, providing an intuitive understanding of the spatial relationships between different locations. The routes are shown as lines connecting different markers representing places. This visualization aids in the creation and annotation of geospatial data for question-answering tasks.", "section": "2.3 Visualization Tools"}, {"figure_path": "https://arxiv.org/html/2412.21015/extracted/6071208/figures/autosuggest.png", "caption": "Figure 12: Summarized Context", "description": "This figure shows a summarized view of the context created by the user in the MAPQATOR platform.  The context includes various pieces of information gathered from different map APIs, such as detailed information about the Eiffel Tower, nearby restaurants around the Louvre Museum with specific rating and price filters, and an optimized driving route between the Louvre Museum and the Eiffel Tower (avoiding tolls and highways). This summary provides a concise overview of the data used to generate the question-answer pairs, aiding in the traceability and reproducibility of the dataset.", "section": "2.5 Question Design and Annotation"}, {"figure_path": "https://arxiv.org/html/2412.21015/extracted/6071208/figures/references.png", "caption": "Figure 13: Visual Context", "description": "This figure shows the visual representation of the context created by the user in MAPQATOR.  It provides a detailed view of the information gathered from various Map APIs, including place details, nearby search results, and computed routes. This visual context helps users understand the spatial relationships between different locations and facilitates the creation of accurate and contextually relevant questions for geospatial QA tasks.", "section": "2.5 Question Design and Annotation"}, {"figure_path": "https://arxiv.org/html/2412.21015/extracted/6071208/figures/example/case_0.png", "caption": "Figure 14: Suggesting available places from the context", "description": "This figure shows a screenshot of the MAPQATOR interface.  The user is in the process of creating a question. A text box displays '@' to indicate that the system is suggesting available places from the previously created context. This feature helps ensure consistency and efficiency in question creation by providing readily available place names relevant to the current task. The user can simply type '@' and then select a suggested place name from the dropdown list, directly inserting it into the text field.", "section": "2.5 Question Design and Annotation"}, {"figure_path": "https://arxiv.org/html/2412.21015/extracted/6071208/figures/demo_snapshots/tools.png", "caption": "Figure 15: Answer format: Open Ended", "description": "This figure shows one of the four distinct answer formats used in the MAPQATOR platform for creating question-answering datasets.  The 'Open Ended' format allows for free-text, detailed answers, assessing a model's ability to provide contextually rich and nuanced responses, particularly useful for complex questions demanding more than a simple yes/no or single-choice response.", "section": "2.5 Question Design and Annotation"}, {"figure_path": "https://arxiv.org/html/2412.21015/extracted/6071208/figures/example/case_1.png", "caption": "Figure 16: Answer format: Yes/No", "description": "This figure demonstrates the Yes/No answer format used in the MAPQATOR platform for creating question-answer pairs.  The Yes/No format is designed for questions that require a simple yes or no answer, allowing for the assessment of the model's ability to handle straightforward factual questions requiring definitive responses. The example in the figure shows a question posed to the model, the 'Yes' or 'No' answer options, and space for annotating the correct answer.", "section": "2.5 Question Design and Annotation"}, {"figure_path": "https://arxiv.org/html/2412.21015/extracted/6071208/figures/example/case_2.png", "caption": "Figure 17: Answer format: Multiple Choice", "description": "This figure shows the Multiple Choice answer format used in the MAPQATOR platform.  Users can select one or more options from a predefined set of choices. This format is designed to assess a model's ability to identify the most suitable answer(s) from a given set of alternatives, testing its ability to distinguish correct answers from incorrect ones.", "section": "2.5 Question Design and Annotation"}, {"figure_path": "https://arxiv.org/html/2412.21015/extracted/6071208/figures/example/case_3.png", "caption": "Figure 18: Answer format: Single Choice", "description": "This figure shows the single-choice question format used in the MAPQATOR platform.  This format presents a question with multiple options, but only one correct answer.  It is designed to assess the model's ability to select the single best answer from a set of alternatives, testing its decision-making and accuracy in selecting the correct response.", "section": "2.5 Question Design and Annotation"}, {"figure_path": "https://arxiv.org/html/2412.21015/extracted/6071208/figures/example/case_4.png", "caption": "Figure 19: Choosing relevant informations to provide the correct answer.", "description": "This figure shows the interface where users select the relevant information from the context to answer a question.  The context contains various pieces of data gathered from different map APIs (e.g., place details, nearby places, routes).  The user must choose which pieces of information in the context are specifically needed to correctly answer the question. This step ensures the traceability and reliability of the dataset by explicitly linking the questions to the appropriate data sources.", "section": "2.5 Question Design and Annotation"}, {"figure_path": "https://arxiv.org/html/2412.21015/extracted/6071208/figures/example/case_5.png", "caption": "Figure 20: Major steps of MapQaTor", "description": "MAPQATOR's workflow is divided into three main stages: context design, question-answer pair creation, and dataset review and saving.  The context design phase involves using MAPQATOR's data collection tools to gather relevant geospatial information, which serves as the foundation for creating question-answer pairs.  Next, researchers generate question-answer pairs, choosing appropriate question types and answer formats based on the context. Finally, the platform enables users to review the generated dataset before saving it for subsequent analysis or use.", "section": "2 MAPQATOR"}, {"figure_path": "https://arxiv.org/html/2412.21015/extracted/6071208/figures/example/case_6.png", "caption": "Figure 21: Overview of data collection tools integrated into MapQaTor, showcasing essential functionalities.", "description": "MapQator offers five core tools for efficient data collection: Text Search, Place Details, Nearby Search, Compute Routes, and Search Along Route.  Each tool seamlessly integrates with various map APIs (Google Maps, OpenStreetMap, Mapbox, TomTom, HERE, and Azure Maps are shown as examples in Table 1 of the paper) to fetch relevant geospatial data.  This figure provides a visual overview of how these tools are integrated within the MapQator platform and used to gather information for creating high-quality question-answer pairs for geospatial reasoning tasks.", "section": "2 MAPQATOR"}, {"figure_path": "https://arxiv.org/html/2412.21015/extracted/6071208/figures/example/case_7.png", "caption": "Figure 22: Example use of TextSearch tool", "description": "This figure shows a screenshot of the TextSearch tool in the MAPQATOR platform.  The user is searching for \"Eiffel Tower\" using the Google Maps API. The interface displays the search bar, a map showing the search results (the Eiffel Tower and surrounding area), and a list of saved places. The image illustrates the tool's functionality in allowing users to search for locations, display them on a map, and save relevant places for later use in creating QA pairs within the platform.", "section": "2.4 Data Collection Tools"}, {"figure_path": "https://arxiv.org/html/2412.21015/extracted/6071208/figures/example/case_8.png", "caption": "Figure 23: Example use of NearbySearch tool", "description": "This figure demonstrates how to use the Nearby Search tool in MAPQATOR.  The user selects a location (in this case, the Eiffel Tower) and specifies the type of point of interest (POI) they are looking for (restaurants).  They can also set parameters like minimum rating and price range to filter results.  The map then displays the nearby restaurants matching the specified criteria, along with information like rating and distance, helping users create question-answer pairs for their geospatial dataset.", "section": "2.4 Data Collection Tools"}, {"figure_path": "https://arxiv.org/html/2412.21015/extracted/6071208/figures/example/case_9.png", "caption": "Figure 24: Nearby restaurants of Eiffel Tower", "description": "This figure displays a screenshot of the MAPQATOR application showing the results of a nearby search for restaurants around the Eiffel Tower.  The results include the name of each restaurant, its rating (out of 5 stars), price range, and the estimated travel time from the Eiffel Tower to each restaurant.  The map visually shows the locations of the restaurants relative to the Eiffel Tower.", "section": "2.4 Data Collection Tools"}, {"figure_path": "https://arxiv.org/html/2412.21015/extracted/6071208/figures/example/case_10.png", "caption": "Figure 25: Example use of ComputeRoutes tool", "description": "This figure shows a screenshot of the ComputeRoutes tool in MAPQATOR. The tool allows users to compute routes between two points, optionally including intermediate stops and avoiding specific road features.  The screenshot displays the tool's interface with input fields for origin, destination, travel mode, optional intermediate stops, and avoidance options.  It showcases the user's ability to specify travel preferences and obtain multiple route options, facilitating the creation of more complex and realistic geospatial questions for the dataset.", "section": "2.4 Data Collection Tools"}, {"figure_path": "https://arxiv.org/html/2412.21015/extracted/6071208/figures/example/case_11.png", "caption": "Figure 26: Available routes from Louvre museum to Eiffel tower by car", "description": "This figure displays a screenshot of the MAPQATOR application showing the available routes calculated between the Louvre Museum and the Eiffel Tower in Paris.  The screenshot shows the available route options, each with its associated travel time and distance, providing a visual representation of the route computation capabilities of the platform.  The results presented are likely derived using a mapping API integrated into MAPQATOR, illustrating the visualization of routes obtained via API calls.  The user can choose from different route options, optimizing potential paths based on criteria such as travel time.", "section": "2.4 Data Collection Tools"}, {"figure_path": "https://arxiv.org/html/2412.21015/extracted/6071208/figures/example/case_12.png", "caption": "Figure 27: Example question creation (1)", "description": "This figure shows a screenshot of the MAPQATOR interface where a user is in the process of creating a question.  The user has selected the question type (Routing) and is in the process of entering the question text.  This is one step in the creation of a question-answer pair to be included in a geospatial question-answering dataset. The screenshot highlights the tools provided by MAPQATOR to facilitate question creation.", "section": "2.5 Question Design and Annotation"}, {"figure_path": "https://arxiv.org/html/2412.21015/extracted/6071208/figures/example/case_13.png", "caption": "Figure 28: Example answer creation (1)", "description": "This figure shows the interface for creating an answer for a question.  The user selects the answer type (in this case, single choice), inputs the correct answer, and then specifies which part(s) of the previously established context are relevant to justifying the answer. This step ensures traceability and reproducibility in the dataset.", "section": "2.5 Question Design and Annotation"}]