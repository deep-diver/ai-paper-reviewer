[{"figure_path": "https://arxiv.org/html/2501.04519/x1.png", "caption": "Figure 1: The overview of \\sysname.", "description": "This figure provides a high-level overview of the rStar-Math system. It illustrates the three key innovations that enable small language models (SLMs) to master math reasoning:  (a) shows the generation of step-by-step reasoning trajectories through Monte Carlo Tree Search (MCTS), where each step is verified using Python code execution, ensuring correctness; (b) depicts the construction of per-step preference pairs based on Q-values obtained from MCTS, enabling the training of a process preference model (PPM) without requiring manual step-level annotations; (c) shows the iterative, self-evolutionary process, where the policy SLM and PPM are repeatedly trained and refined using increasingly high-quality data generated by the system.", "section": "1 Introduction"}, {"figure_path": "https://arxiv.org/html/2501.04519/x2.png", "caption": "Figure 2: An example of Code-augmented CoT.", "description": "This figure shows an example of a Code-augmented Chain of Thought (CoT) used in the rStar-Math model.  The example problem is a word problem asking to calculate the direct distance from a starting point after a series of movements. The solution is presented step-by-step using a code-augmented CoT, where each step involves natural language reasoning (the NL CoT) accompanied by executable Python code. The Python code directly implements the reasoning described in the accompanying natural language. This approach ensures the correctness and verifiability of each step, mitigating the problem of hallucination often seen in large language models (LLMs) that generate only natural language reasoning steps.", "section": "3.2 Step-by-Step Verified Reasoning Trajectory"}, {"figure_path": "https://arxiv.org/html/2501.04519/extracted/6117756/scalinglaws.png", "caption": "Figure 3: Reasoning performance under scaling up the test-time compute.", "description": "This figure displays the impact of increasing computational resources during testing on the accuracy of mathematical problem-solving.  Four different benchmarks (MATH, AIME 2024, Olympiad Bench, and College Math) are shown, each represented by a separate graph. The x-axis represents the number of solutions sampled during the test-time computation, and the y-axis shows the percentage accuracy achieved.  Multiple models are compared: OpenAI's o1-preview and o1-mini models, and the rStar-Math model with a 7B parameter policy LLM and a 7B parameter PPM, as well as a comparison using Qwen2.5 Best-of-N models with 7B and 72B parameter LLMs and a 72B parameter ORM. This allows for a visual comparison of how different models and levels of computational scaling (number of solution samples) impact the accuracy of mathematical reasoning across the various benchmarks. The plot shows that increasing the number of samples generally improves accuracy, but the rate of improvement varies for different models and benchmarks. It also highlights the competitive performance of rStar-Math, sometimes exceeding even the larger models with less compute.", "section": "4 Evaluation"}, {"figure_path": "https://arxiv.org/html/2501.04519/x3.png", "caption": "Figure 4: An example of intrinsic self-reflection during \\sysname deep thinking.", "description": "This figure shows an example of the model's intrinsic self-reflection ability during problem-solving.  The model initially attempts a solution using SymPy, but realizes it's leading to an incorrect answer (as indicated by the low PPM score). It then abandons this approach, and instead finds a simpler and correct solution. This demonstrates the model's ability to identify and correct its own mistakes, rather than simply continuing down an incorrect path.", "section": "3.4 Self-Evolved Deep Thinking"}, {"figure_path": "https://arxiv.org/html/2501.04519/extracted/6117756/ppm_study.png", "caption": "Figure 5: Pass@1 accuracy of policy models and their accuracy after applying System 2 reasoning with various reward models, shows that reward models primarily determine the final performance.", "description": "Figure 5 presents a comparative analysis of the performance of various policy models (different sizes) before and after integrating them into a System 2 reasoning framework.  The x-axis represents different mathematical benchmarks (MATH, AIME 2024, AMC 2023, Olympiad Bench, College Math), while the y-axis shows Pass@1 accuracy.  The bars visually represent the accuracy of individual policy models (various base models) using only System 1 reasoning (i.e., generating a single answer without deep thinking).  The bars also show the improved performance achieved by incorporating these models into a System 2 deep thinking approach with various reward models (ORM, PPM). The key takeaway is that the reward model significantly impacts the final performance of the system, highlighting its importance in System 2 deep thinking.", "section": "4 Evaluation"}, {"figure_path": "https://arxiv.org/html/2501.04519/extracted/6117756/passnrandom.png", "caption": "Figure 6: Pass@N accuracy with random sampling from different policy models. Compared to the official Qwen instruct version, our policy model exhibits a stronger ability to sample correct solutions.", "description": "Figure 6 presents a comparison of the accuracy (Pass@N) achieved using random sampling for solution selection from various policy models. The x-axis represents the number of solutions sampled (N), while the y-axis shows the accuracy.  Four different benchmarks are shown: MATH, AIME 2024, Olympiad Bench, and College Math.  The results demonstrate that the rStar-Math policy models consistently outperform the official Qwen instruct versions, showcasing their superior ability to generate correct solutions, even when only a small number of samples are considered.", "section": "4.2 Main Results"}, {"figure_path": "https://arxiv.org/html/2501.04519/extracted/6117756/passnmcts.png", "caption": "Figure 7: Pass@N accuracy with PPM-augmented MCTS. Under the same PPM guidance, the four policy models of varying sizes demonstrate convergent capabilities in sampling correct solutions.", "description": "Figure 7 illustrates the performance of four different sized language models (1.5B, 3.8B, 7B, and 72B parameters) on several math reasoning benchmarks when using Monte Carlo Tree Search (MCTS) with a process preference model (PPM).  The key takeaway is that despite the varying sizes of the base models,  their accuracy in sampling correct solutions converges as the number of MCTS samples increases. This highlights the effectiveness of the PPM in guiding the search process, regardless of the underlying model's size.", "section": "4 Evaluation"}]