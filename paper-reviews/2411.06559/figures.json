[{"figure_path": "https://arxiv.org/html/2411.06559/x1.png", "caption": "Figure 1: Schematic illustration of different strategies for web agents formulated as a search problem. Each node represents a webpage.\n(a) Reactive: The agent selects locally optimal actions without forward planning, often leading to suboptimal outcomes.\n(b) Tree search with real interactions: The agent explores multiple paths through active website navigation and permits backtracking (indicated by dashed arrows).\nHowever, in real-world websites, backtracking is often infeasible due to the prevalence of irreversible actions.\n(c) Model-based planning: The agent simulates potential outcomes (illustrated by cloud-bordered nodes) to determine optimal actions prior to real-world execution, thus minimizing actual website interactions while maintaining effectiveness. For visual clarity, only one-step simulated outcomes are depicted.\nFaded nodes indicate unexplored webpages, while green checkmarks and red crosses denote successful and unsuccessful outcomes, respectively.", "description": "Figure 1 illustrates three different approaches for web agents to solve a problem framed as a search. Each node in the diagrams represents a webpage.  (a) shows a reactive agent making locally optimal choices without any planning, often resulting in poor outcomes. (b) demonstrates a tree search agent using real website interactions. This approach allows exploration of multiple paths and backtracking (dashed lines), but this is often unrealistic on real websites due to irreversible actions like purchasing. (c) shows a model-based planning agent, which uses simulations (cloud-bordered nodes) to predict the outcomes of different actions before performing them. The simulation helps to find the best actions, reducing interactions and improving effectiveness.  Only one level of simulations is shown for clarity. Light nodes represent unexplored pages, green checks indicate successful simulations, and red crosses show unsuccessful ones.", "section": "1 INTRODUCTION"}, {"figure_path": "https://arxiv.org/html/2411.06559/x2.png", "caption": "Figure 2: Illustration of WebDreamer using the LLM to simulate the outcome of each candidate action.\nThe LLM simulates trajectories in natural language descriptions for three candidate actions: (1) Click \u201cOffice Products\u201d, (2) Click \u201cElectronics\u201d, and (3) Type \u201cDisk\u201d into textbox.\nThrough these simulations, each resulting trajectory is scored to identify the action most likely to succeed. In this case, the LLM selects Click Click \u201cElectronics\u201d as the optimal step and executes it.\nEach dotted box represents an LLM-generated state description after each simulated action. This example demonstrates a two-step planning horizon.", "description": "WebDreamer uses an LLM to simulate the consequences of different actions before executing them on a website.  The figure shows three possible actions: clicking \"Office Products\", clicking \"Electronics\", and typing \"Disk\" into a search bar.  The LLM generates natural language descriptions of what would happen after each action (shown in dotted boxes), effectively creating simulated trajectories.  These trajectories are then scored, and the action leading to the highest-scoring trajectory (in this case, clicking \"Electronics\") is selected and performed. The example illustrates a two-step planning horizon, meaning the LLM simulates the outcome of the chosen action and then simulates the subsequent action.", "section": "4.1 Core Design"}, {"figure_path": "https://arxiv.org/html/2411.06559/x3.png", "caption": "(a) Websites", "description": "This figure shows a breakdown of the success rates of different web agents (Reactive, Tree Search, WEBDREAMER) across three different websites within the VisualWebArena benchmark.  The purpose is to illustrate how the performance of each agent varies depending on the specific characteristics of the website.", "section": "5.2 Main Results"}, {"figure_path": "https://arxiv.org/html/2411.06559/x4.png", "caption": "(b) Task Difficulty", "description": "This figure shows a breakdown of success rates for different task difficulties (easy, medium, hard) on the VisualWebArena benchmark.  For each difficulty level, it compares the performance of three approaches: a reactive agent, a tree search agent, and the WEBDREAMER model. The numbers represent the percentage of successful task completions for each method at each difficulty level.  The aim is to demonstrate the effectiveness of WEBDREAMER across varying task complexities compared to the baselines.  'y' represents the relative improvement of WEBDREAMER over the reactive agent, illustrating the degree to which WEBDREAMER closes the performance gap between the reactive and tree search methods.", "section": "5.2 Main Results"}, {"figure_path": "https://arxiv.org/html/2411.06559/x5.png", "caption": "(a) Number of Action Steps", "description": "This figure shows a comparison of the number of actions steps taken by different web agent strategies on the VisualWebArena benchmark.  It breaks down the number of steps for each of three strategies: Reactive, Tree Search, and WebDreamer, across three different websites: Classifieds, Reddit, and Shopping.  The data illustrates the relative efficiency of each approach in achieving task completion, highlighting the differences in the number of interactions needed with the websites.", "section": "5.2 Main Results"}, {"figure_path": "https://arxiv.org/html/2411.06559/x6.png", "caption": "(b) Task Completion Wall Clock Time", "description": "This figure shows the wall clock time taken to complete tasks in the VisualWebArena benchmark.  It compares the time taken by three different web agent approaches: a reactive agent, a tree search agent, and the WEBDREAMER model-based planning agent. The results are broken down by website (Classifieds, Reddit, Shopping) to show the performance variation across different website structures and complexities.", "section": "5.2 Main Results"}]